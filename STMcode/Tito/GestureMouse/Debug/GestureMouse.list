
GestureMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009784  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015948  08009924  08009924  0000a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f26c  0801f26c  00021178  2**0
                  CONTENTS
  4 .ARM          00000008  0801f26c  0801f26c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f274  0801f274  00021178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f274  0801f274  00020274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f278  0801f278  00020278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  0801f27c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001648  20000178  0801f3f4  00021178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  0801f3f4  000217c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d8f  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003596  00000000  00000000  00033f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000374d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbf  00000000  00000000  00038478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f49  00000000  00000000  00039037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c81  00000000  00000000  00052f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfbc  00000000  00000000  00068c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6bbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  000f6c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fb298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800990c 	.word	0x0800990c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800990c 	.word	0x0800990c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:

#include "debug.h"
#include "usart.h"  // Include USART header where huart2 is initialized

// Redirect printf() to UART2
int __io_putchar(int ch) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <__io_putchar+0x20>)
 8000582:	f004 f9db 	bl	800493c <HAL_UART_Transmit>
    return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000c50 	.word	0x20000c50

08000594 <Debug_Init>:

void Debug_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    // Ensure USART2 is initialized before using printf()
    MX_USART2_UART_Init();
 8000598:	f000 fba8 	bl	8000cec <MX_USART2_UART_Init>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <main>:
#include "debug.h"             // Required for `huart2`

extern USBD_HandleTypeDef hUsbDeviceFS;  // Declare USB device handle
extern UART_HandleTypeDef huart2;  // Declare UART2 handle

int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    /* Initialize HAL Library */
    HAL_Init();
 80005a6:	f001 fef9 	bl	800239c <HAL_Init>

    /* Configure System Clock */
    SystemClock_Config();
 80005aa:	f000 f8a7 	bl	80006fc <SystemClock_Config>

    /* Initialize Peripherals */
    MX_GPIO_Init();
 80005ae:	f000 f915 	bl	80007dc <MX_GPIO_Init>
    Debug_Init();
 80005b2:	f7ff ffef 	bl	8000594 <Debug_Init>
    MX_USB_DEVICE_Init();
 80005b6:	f007 fdd5 	bl	8008164 <MX_USB_DEVICE_Init>
    Sensor_Init();
 80005ba:	f000 f99b 	bl	80008f4 <Sensor_Init>

    printf("Gesture Recognition System Initialized!\n");
 80005be:	4847      	ldr	r0, [pc, #284]	@ (80006dc <main+0x13c>)
 80005c0:	f008 fb32 	bl	8008c28 <puts>

    while (1) {
        char gesture = DetectGesture();
 80005c4:	f000 f9ae 	bl	8000924 <DetectGesture>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]

        if (gesture != 'N') {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80005d0:	d004      	beq.n	80005dc <main+0x3c>
                printf("Detected Gesture: %c\n", gesture);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4842      	ldr	r0, [pc, #264]	@ (80006e0 <main+0x140>)
 80005d8:	f008 fabe 	bl	8008b58 <iprintf>
            }

        switch (gesture) {
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3b44      	subs	r3, #68	@ 0x44
 80005e0:	2b2c      	cmp	r3, #44	@ 0x2c
 80005e2:	d875      	bhi.n	80006d0 <main+0x130>
 80005e4:	a201      	add	r2, pc, #4	@ (adr r2, 80005ec <main+0x4c>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	080006a9 	.word	0x080006a9
 80005f0:	080006d1 	.word	0x080006d1
 80005f4:	080006d1 	.word	0x080006d1
 80005f8:	080006d1 	.word	0x080006d1
 80005fc:	080006d1 	.word	0x080006d1
 8000600:	080006d1 	.word	0x080006d1
 8000604:	080006d1 	.word	0x080006d1
 8000608:	080006d1 	.word	0x080006d1
 800060c:	080006b1 	.word	0x080006b1
 8000610:	080006d1 	.word	0x080006d1
 8000614:	080006d1 	.word	0x080006d1
 8000618:	080006d1 	.word	0x080006d1
 800061c:	080006c1 	.word	0x080006c1
 8000620:	080006d1 	.word	0x080006d1
 8000624:	080006b9 	.word	0x080006b9
 8000628:	080006d1 	.word	0x080006d1
 800062c:	080006d1 	.word	0x080006d1
 8000630:	080006a1 	.word	0x080006a1
 8000634:	080006d1 	.word	0x080006d1
 8000638:	080006d1 	.word	0x080006d1
 800063c:	080006d1 	.word	0x080006d1
 8000640:	080006d1 	.word	0x080006d1
 8000644:	080006d1 	.word	0x080006d1
 8000648:	080006d1 	.word	0x080006d1
 800064c:	080006d1 	.word	0x080006d1
 8000650:	080006d1 	.word	0x080006d1
 8000654:	080006d1 	.word	0x080006d1
 8000658:	080006d1 	.word	0x080006d1
 800065c:	080006d1 	.word	0x080006d1
 8000660:	080006d1 	.word	0x080006d1
 8000664:	080006d1 	.word	0x080006d1
 8000668:	080006d1 	.word	0x080006d1
 800066c:	080006d1 	.word	0x080006d1
 8000670:	080006d1 	.word	0x080006d1
 8000674:	080006d1 	.word	0x080006d1
 8000678:	080006d1 	.word	0x080006d1
 800067c:	080006d1 	.word	0x080006d1
 8000680:	080006d1 	.word	0x080006d1
 8000684:	080006d1 	.word	0x080006d1
 8000688:	080006d1 	.word	0x080006d1
 800068c:	080006d1 	.word	0x080006d1
 8000690:	080006d1 	.word	0x080006d1
 8000694:	080006d1 	.word	0x080006d1
 8000698:	080006d1 	.word	0x080006d1
 800069c:	080006c9 	.word	0x080006c9
            case 'U': printf("Detected Gesture: Up Swipe\n"); break;
 80006a0:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <main+0x144>)
 80006a2:	f008 fac1 	bl	8008c28 <puts>
 80006a6:	e014      	b.n	80006d2 <main+0x132>
            case 'D': printf("Detected Gesture: Down Swipe\n"); break;
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <main+0x148>)
 80006aa:	f008 fabd 	bl	8008c28 <puts>
 80006ae:	e010      	b.n	80006d2 <main+0x132>
            case 'L': printf("Detected Gesture: Left Swipe\n"); break;
 80006b0:	480e      	ldr	r0, [pc, #56]	@ (80006ec <main+0x14c>)
 80006b2:	f008 fab9 	bl	8008c28 <puts>
 80006b6:	e00c      	b.n	80006d2 <main+0x132>
            case 'R': printf("Detected Gesture: Right Swipe\n"); break;
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <main+0x150>)
 80006ba:	f008 fab5 	bl	8008c28 <puts>
 80006be:	e008      	b.n	80006d2 <main+0x132>
            case 'P': printf("Detected Gesture: Push\n"); break;
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <main+0x154>)
 80006c2:	f008 fab1 	bl	8008c28 <puts>
 80006c6:	e004      	b.n	80006d2 <main+0x132>
            case 'p': printf("Detected Gesture: Pull\n"); break;
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <main+0x158>)
 80006ca:	f008 faad 	bl	8008c28 <puts>
 80006ce:	e000      	b.n	80006d2 <main+0x132>
            default: break;  // No gesture detected
 80006d0:	bf00      	nop
        }

        HAL_Delay(500);  // Adjust for better readability
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f001 fed3 	bl	8002480 <HAL_Delay>
    while (1) {
 80006da:	e773      	b.n	80005c4 <main+0x24>
 80006dc:	08009924 	.word	0x08009924
 80006e0:	0800994c 	.word	0x0800994c
 80006e4:	08009964 	.word	0x08009964
 80006e8:	08009980 	.word	0x08009980
 80006ec:	080099a0 	.word	0x080099a0
 80006f0:	080099c0 	.word	0x080099c0
 80006f4:	080099e0 	.word	0x080099e0
 80006f8:	080099f8 	.word	0x080099f8

080006fc <SystemClock_Config>:
}

/**
 * @brief System Clock Configuration
 */
void SystemClock_Config(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 fb6c 	bl	8008de8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

    /* Enable Power Control clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a2a      	ldr	r2, [pc, #168]	@ (80007d4 <SystemClock_Config+0xd8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]

    /* Configure the main internal regulator output voltage */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemClock_Config+0xdc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a24      	ldr	r2, [pc, #144]	@ (80007d8 <SystemClock_Config+0xdc>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xdc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

    /* Initializes the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000770:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000776:	2304      	movs	r3, #4
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;  // Generates 48 MHz for USB
 800077a:	2307      	movs	r3, #7
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fb8a 	bl	8003e9c <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x96>
        Error_Handler();
 800078e:	f000 f88f 	bl	80008b0 <Error_Handler>
    }

    /* Initializes the CPU, AHB, and APB clocks */
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000792:	230f      	movs	r3, #15
 8000794:	60fb      	str	r3, [r7, #12]
                                    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fdeb 	bl	800438c <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc4>
        Error_Handler();
 80007bc:	f000 f878 	bl	80008b0 <Error_Handler>
    }

    /* Configure MCO1 (PA8) to output PLL clock (84 MHz) */
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 80007c6:	2000      	movs	r0, #0
 80007c8:	f003 fec6 	bl	8004558 <HAL_RCC_MCOConfig>
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	@ 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:

/**
 * @brief GPIO Initialization
 */
void MX_GPIO_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a2b      	ldr	r2, [pc, #172]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a24      	ldr	r2, [pc, #144]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a1d      	ldr	r2, [pc, #116]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_GPIO_Init+0xcc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

    /* Configure PA8 as MCO (Clock Output) */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0xd0>)
 8000880:	f001 ff34 	bl	80026ec <HAL_GPIO_Init>

    /* Configure LED (PA5) as Output */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000884:	2320      	movs	r3, #32
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_GPIO_Init+0xd0>)
 800089c:	f001 ff26 	bl	80026ec <HAL_GPIO_Init>
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	@ 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <Error_Handler>:

void Error_Handler(void) {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
    char error_msg[] = "System encountered an error!\n";
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <Error_Handler+0x38>)
 80008b8:	463c      	mov	r4, r7
 80008ba:	461d      	mov	r5, r3
 80008bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008c4:	c407      	stmia	r4!, {r0, r1, r2}
 80008c6:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, sizeof(error_msg), HAL_MAX_DELAY);
 80008c8:	4639      	mov	r1, r7
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	221e      	movs	r2, #30
 80008d0:	4806      	ldr	r0, [pc, #24]	@ (80008ec <Error_Handler+0x3c>)
 80008d2:	f004 f833 	bl	800493c <HAL_UART_Transmit>

    /* Blink LED rapidly */
    while (1) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008d6:	2120      	movs	r1, #32
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <Error_Handler+0x40>)
 80008da:	f002 f88b 	bl	80029f4 <HAL_GPIO_TogglePin>
        HAL_Delay(250);
 80008de:	20fa      	movs	r0, #250	@ 0xfa
 80008e0:	f001 fdce 	bl	8002480 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008e4:	bf00      	nop
 80008e6:	e7f6      	b.n	80008d6 <Error_Handler+0x26>
 80008e8:	08009a10 	.word	0x08009a10
 80008ec:	20000c50 	.word	0x20000c50
 80008f0:	40020000 	.word	0x40020000

080008f4 <Sensor_Init>:
int16_t previous_y = 0;  // Placeholder for Y-axis tracking

/**
 * @brief Initializes the VL53L8CX sensor.
 */
void Sensor_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    if (vl53l8cx_init(&sensor_config) != 0) {
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <Sensor_Init+0x24>)
 80008fa:	f000 fdf5 	bl	80014e8 <vl53l8cx_init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <Sensor_Init+0x18>
        printf("VL53L8CX Initialization Failed!\n");
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <Sensor_Init+0x28>)
 8000906:	f008 f98f 	bl	8008c28 <puts>
    } else {
        printf("VL53L8CX Sensor Initialized.\n");
    }
}
 800090a:	e002      	b.n	8000912 <Sensor_Init+0x1e>
        printf("VL53L8CX Sensor Initialized.\n");
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <Sensor_Init+0x2c>)
 800090e:	f008 f98b 	bl	8008c28 <puts>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000194 	.word	0x20000194
 800091c:	08009a30 	.word	0x08009a30
 8000920:	08009a50 	.word	0x08009a50

08000924 <DetectGesture>:

/**
 * @brief Detects hand gestures based on distance and movement changes.
 * @return Character representing detected gesture.
 */
char DetectGesture(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
 800092a:	af00      	add	r7, sp, #0
    VL53L8CX_ResultsData results;
    vl53l8cx_get_ranging_data(&sensor_config, &results);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	483a      	ldr	r0, [pc, #232]	@ (8000a1c <DetectGesture+0xf8>)
 8000932:	f001 fa05 	bl	8001d40 <vl53l8cx_get_ranging_data>

    uint16_t current_distance = results.distance_mm;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800093c:	f8a7 3566 	strh.w	r3, [r7, #1382]	@ 0x566
    int16_t current_x = 0;  // Placeholder for X-axis tracking
 8000940:	2300      	movs	r3, #0
 8000942:	f8a7 3564 	strh.w	r3, [r7, #1380]	@ 0x564
    int16_t current_y = 0;  // Placeholder for Y-axis tracking
 8000946:	2300      	movs	r3, #0
 8000948:	f8a7 3562 	strh.w	r3, [r7, #1378]	@ 0x562

    int16_t distance_diff = current_distance - previous_distance;
 800094c:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <DetectGesture+0xfc>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f8b7 2566 	ldrh.w	r2, [r7, #1382]	@ 0x566
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b29b      	uxth	r3, r3
 8000958:	f8a7 3560 	strh.w	r3, [r7, #1376]	@ 0x560
    int16_t x_diff = current_x - previous_x;
 800095c:	f8b7 2564 	ldrh.w	r2, [r7, #1380]	@ 0x564
 8000960:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <DetectGesture+0x100>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	b29b      	uxth	r3, r3
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	f8a7 355e 	strh.w	r3, [r7, #1374]	@ 0x55e
    int16_t y_diff = current_y - previous_y;
 8000970:	f8b7 2562 	ldrh.w	r2, [r7, #1378]	@ 0x562
 8000974:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <DetectGesture+0x104>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	b29b      	uxth	r3, r3
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	f8a7 355c 	strh.w	r3, [r7, #1372]	@ 0x55c

    // Update previous values for next cycle
    previous_distance = current_distance;
 8000984:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <DetectGesture+0xfc>)
 8000986:	f8b7 3566 	ldrh.w	r3, [r7, #1382]	@ 0x566
 800098a:	8013      	strh	r3, [r2, #0]
    previous_x = current_x;
 800098c:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <DetectGesture+0x100>)
 800098e:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	@ 0x564
 8000992:	8013      	strh	r3, [r2, #0]
    previous_y = current_y;
 8000994:	4a24      	ldr	r2, [pc, #144]	@ (8000a28 <DetectGesture+0x104>)
 8000996:	f8b7 3562 	ldrh.w	r3, [r7, #1378]	@ 0x562
 800099a:	8013      	strh	r3, [r2, #0]

    // Fine-tuned thresholds for gesture detection
    int threshold_swipe = 60;  // Detect swipe gestures (adjust based on testing)
 800099c:	233c      	movs	r3, #60	@ 0x3c
 800099e:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
    int threshold_push_pull = 25;  // Detect push/pull movements
 80009a2:	2319      	movs	r3, #25
 80009a4:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554

    // Detect Push and Pull gestures
    if (distance_diff > threshold_push_pull) return 'P';  // Push
 80009a8:	f9b7 3560 	ldrsh.w	r3, [r7, #1376]	@ 0x560
 80009ac:	f8d7 2554 	ldr.w	r2, [r7, #1364]	@ 0x554
 80009b0:	429a      	cmp	r2, r3
 80009b2:	da01      	bge.n	80009b8 <DetectGesture+0x94>
 80009b4:	2350      	movs	r3, #80	@ 0x50
 80009b6:	e02b      	b.n	8000a10 <DetectGesture+0xec>
    if (distance_diff < -threshold_push_pull) return 'p'; // Pull
 80009b8:	f9b7 2560 	ldrsh.w	r2, [r7, #1376]	@ 0x560
 80009bc:	f8d7 3554 	ldr.w	r3, [r7, #1364]	@ 0x554
 80009c0:	425b      	negs	r3, r3
 80009c2:	429a      	cmp	r2, r3
 80009c4:	da01      	bge.n	80009ca <DetectGesture+0xa6>
 80009c6:	2370      	movs	r3, #112	@ 0x70
 80009c8:	e022      	b.n	8000a10 <DetectGesture+0xec>

    // Detect Swipe Gestures (Left, Right, Up, Down)
    if (x_diff > threshold_swipe) return 'R';  // Swipe Right
 80009ca:	f9b7 355e 	ldrsh.w	r3, [r7, #1374]	@ 0x55e
 80009ce:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80009d2:	429a      	cmp	r2, r3
 80009d4:	da01      	bge.n	80009da <DetectGesture+0xb6>
 80009d6:	2352      	movs	r3, #82	@ 0x52
 80009d8:	e01a      	b.n	8000a10 <DetectGesture+0xec>
    if (x_diff < -threshold_swipe) return 'L'; // Swipe Left
 80009da:	f9b7 255e 	ldrsh.w	r2, [r7, #1374]	@ 0x55e
 80009de:	f8d7 3558 	ldr.w	r3, [r7, #1368]	@ 0x558
 80009e2:	425b      	negs	r3, r3
 80009e4:	429a      	cmp	r2, r3
 80009e6:	da01      	bge.n	80009ec <DetectGesture+0xc8>
 80009e8:	234c      	movs	r3, #76	@ 0x4c
 80009ea:	e011      	b.n	8000a10 <DetectGesture+0xec>
    if (y_diff > threshold_swipe) return 'U';  // Swipe Up
 80009ec:	f9b7 355c 	ldrsh.w	r3, [r7, #1372]	@ 0x55c
 80009f0:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80009f4:	429a      	cmp	r2, r3
 80009f6:	da01      	bge.n	80009fc <DetectGesture+0xd8>
 80009f8:	2355      	movs	r3, #85	@ 0x55
 80009fa:	e009      	b.n	8000a10 <DetectGesture+0xec>
    if (y_diff < -threshold_swipe) return 'D'; // Swipe Down
 80009fc:	f9b7 255c 	ldrsh.w	r2, [r7, #1372]	@ 0x55c
 8000a00:	f8d7 3558 	ldr.w	r3, [r7, #1368]	@ 0x558
 8000a04:	425b      	negs	r3, r3
 8000a06:	429a      	cmp	r2, r3
 8000a08:	da01      	bge.n	8000a0e <DetectGesture+0xea>
 8000a0a:	2344      	movs	r3, #68	@ 0x44
 8000a0c:	e000      	b.n	8000a10 <DetectGesture+0xec>

    return 'N'; // No gesture detected
 8000a0e:	234e      	movs	r3, #78	@ 0x4e
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	f507 67ad 	add.w	r7, r7, #1384	@ 0x568
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000194 	.word	0x20000194
 8000a20:	20000c44 	.word	0x20000c44
 8000a24:	20000c46 	.word	0x20000c46
 8000a28:	20000c48 	.word	0x20000c48

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f001 fdfb 	bl	80026ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f001 fc6d 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <OTG_FS_IRQHandler+0x10>)
 8000b72:	f002 f89d 	bl	8002cb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000117c 	.word	0x2000117c

08000b80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b92:	f3af 8000 	nop.w
 8000b96:	4601      	mov	r1, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <_read+0x12>
  }

  return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e009      	b.n	8000be0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fccb 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf1      	blt.n	8000bcc <_write+0x12>
  }
  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f008 f8fa 	bl	8008e84 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20018000 	.word	0x20018000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	20000c4c 	.word	0x20000c4c
 8000cc4:	200017c0 	.word	0x200017c0

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <MX_USART2_UART_Init>:

#include "usart.h"

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f003 fdba 	bl	800489c <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000d2e:	f7ff fdbf 	bl	80008b0 <Error_Handler>
    }
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000c50 	.word	0x20000c50
 8000d3c:	40004400 	.word	0x40004400

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d44:	f7ff ffc0 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f008 f88f 	bl	8008e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fc15 	bl	80005a0 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8000d84:	0801f27c 	.word	0x0801f27c
  ldr r2, =_sbss
 8000d88:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000d8c:	200017c0 	.word	0x200017c0

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>

08000d92 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4603      	mov	r3, r0
 8000da2:	70fb      	strb	r3, [r7, #3]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70bb      	strb	r3, [r7, #2]
 8000da8:	4613      	mov	r3, r2
 8000daa:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8000db4:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L8CX_RdMulti(&(p_dev->platform), address,
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	8839      	ldrh	r1, [r7, #0]
 8000dc0:	f001 fa96 	bl	80022f0 <VL53L8CX_RdMulti>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	73fb      	strb	r3, [r7, #15]
		status |= VL53L8CX_WaitMs(&(p_dev->platform), 10);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	210a      	movs	r1, #10
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fad3 	bl	800237e <VL53L8CX_WaitMs>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	2bc7      	cmp	r3, #199	@ 0xc7
 8000de6:	d904      	bls.n	8000df2 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
			break;
 8000df0:	e01a      	b.n	8000e28 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d909      	bls.n	8000e0c <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8000dfe:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e00:	d904      	bls.n	8000e0c <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8000e08:	73fb      	strb	r3, [r7, #15]
			break;
 8000e0a:	e00d      	b.n	8000e28 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8000e12:	78bb      	ldrb	r3, [r7, #2]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8000e1c:	7e3b      	ldrb	r3, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	7f3a      	ldrb	r2, [r7, #28]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d1c5      	bne.n	8000db4 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L8CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f107 020b 	add.w	r2, r7, #11
 8000e48:	2106      	movs	r1, #6
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa1e 	bl	800228c <VL53L8CX_RdByte>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8000e5a:	7afb      	ldrb	r3, [r7, #11]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da10      	bge.n	8000e84 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= VL53L8CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f107 020a 	add.w	r2, r7, #10
 8000e68:	2107      	movs	r1, #7
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fa0e 	bl	800228c <VL53L8CX_RdByte>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 8000e7a:	7abb      	ldrb	r3, [r7, #10]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d111      	bne.n	8000ea8 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2101      	movs	r1, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fa78 	bl	800237e <VL53L8CX_WaitMs>
		timeout++;
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8000e94:	7afb      	ldrb	r3, [r7, #11]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8000e9e:	89bb      	ldrh	r3, [r7, #12]
 8000ea0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ea4:	d3cd      	bcc.n	8000e42 <_vl53l8cx_poll_for_mcu_boot+0x10>
 8000ea6:	e002      	b.n	8000eae <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8000ea8:	bf00      	nop
 8000eaa:	e000      	b.n	8000eae <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8000eac:	bf00      	nop

   return status;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ea      	sub	sp, #424	@ 0x1a8
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ec2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000ec6:	6018      	str	r0, [r3, #0]
 8000ec8:	460a      	mov	r2, r1
 8000eca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ece:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000ed2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8000eda:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ede:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000ee2:	4ad9      	ldr	r2, [pc, #868]	@ (8001248 <_vl53l8cx_send_offset_data+0x390>)
 8000ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8000eec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ef0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8000ef4:	4ad5      	ldr	r2, [pc, #852]	@ (800124c <_vl53l8cx_send_offset_data+0x394>)
 8000ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efa:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8000efe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8000f0c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f10:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8000f18:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f007 ffde 	bl	8008ede <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 8000f22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f26:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	f040 8122 	bne.w	8001176 <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8000f32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f36:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8000f40:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f44:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000f48:	cb03      	ldmia	r3!, {r0, r1}
 8000f4a:	6010      	str	r0, [r2, #0]
 8000f4c:	6051      	str	r1, [r2, #4]
		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8000f4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f52:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000f5c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f9d6 	bl	8002312 <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8000f66:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f6a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8000f74:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 ffae 	bl	8008ede <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8000f82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 ffa1 	bl	8008ede <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8000fa2:	e0ac      	b.n	80010fe <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8000faa:	e09c      	b.n	80010e6 <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8000fac:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8000fb0:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005a      	lsls	r2, r3, #1
 8000fba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8000fc6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8000fca:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	1c59      	adds	r1, r3, #1
 8000fd6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8000fe4:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8000fe8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	0059      	lsls	r1, r3, #1
 8000ff4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001000:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8001002:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001006:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	f103 0109 	add.w	r1, r3, #9
 8001014:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800101c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001020:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001022:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001026:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800102e:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001030:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 800103c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001040:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	005a      	lsls	r2, r3, #1
 800104a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800104e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001052:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001056:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001058:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800105c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800106c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001070:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001074:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001076:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800107a:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	440a      	add	r2, r1
 8001082:	3204      	adds	r2, #4
 8001084:	0051      	lsls	r1, r2, #1
 8001086:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800108a:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800108e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001092:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001094:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8001098:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	440a      	add	r2, r1
 80010a0:	0052      	lsls	r2, r2, #1
 80010a2:	f102 0109 	add.w	r1, r2, #9
 80010a6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80010aa:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80010ae:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80010b2:	4413      	add	r3, r2
                                  /(int16_t)4;
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da00      	bge.n	80010ba <_vl53l8cx_send_offset_data+0x202>
 80010b8:	3303      	adds	r3, #3
 80010ba:	109b      	asrs	r3, r3, #2
 80010bc:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80010be:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80010c2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	441a      	add	r2, r3
 80010ca:	b209      	sxth	r1, r1
 80010cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010d0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80010d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80010d8:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80010e6:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	f77f af5e 	ble.w	8000fac <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80010f0:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80010fe:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001102:	2b03      	cmp	r3, #3
 8001104:	f77f af4e 	ble.w	8000fa4 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	3320      	adds	r3, #32
 800110e:	2260      	movs	r2, #96	@ 0x60
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fe68 	bl	8008de8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8001118:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800111c:	3340      	adds	r3, #64	@ 0x40
 800111e:	22c0      	movs	r2, #192	@ 0xc0
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f007 fe60 	bl	8008de8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001128:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800112c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8001136:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800113a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113e:	4618      	mov	r0, r3
 8001140:	f007 fecd 	bl	8008ede <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001144:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001148:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001152:	f107 0118 	add.w	r1, r7, #24
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fec0 	bl	8008ede <memcpy>
		range_grid, sizeof(range_grid));
            VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 800115e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001162:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800116c:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f8ce 	bl	8002312 <VL53L8CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001176:	2300      	movs	r3, #0
 8001178:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800117c:	e01b      	b.n	80011b6 <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800117e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001182:	f103 0208 	add.w	r2, r3, #8
 8001186:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800118a:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800118e:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8001192:	6809      	ldr	r1, [r1, #0]
 8001194:	440a      	add	r2, r1
 8001196:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 800119a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800119e:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	460a      	mov	r2, r1
 80011a8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80011ac:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80011b6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80011ba:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 80011be:	d3de      	bcc.n	800117e <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 80011c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 80011ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011d2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80011d6:	cb03      	ldmia	r3!, {r0, r1}
 80011d8:	6010      	str	r0, [r2, #0]
 80011da:	6051      	str	r1, [r2, #4]
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80011dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80011f4:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80011f8:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80011fc:	f001 f867 	bl	80022ce <VL53L8CX_WrMulti>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001208:	4313      	orrs	r3, r2
 800120a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800120e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001212:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8001216:	2303      	movs	r3, #3
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	23ff      	movs	r3, #255	@ 0xff
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	6800      	ldr	r0, [r0, #0]
 8001228:	f7ff fdb3 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8001234:	4313      	orrs	r3, r2
 8001236:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800123a:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 800123e:	4618      	mov	r0, r3
 8001240:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08009a70 	.word	0x08009a70
 800124c:	08009a78 	.word	0x08009a78

08001250 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ca      	sub	sp, #296	@ 0x128
 8001254:	af02      	add	r7, sp, #8
 8001256:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800125a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800125e:	6018      	str	r0, [r3, #0]
 8001260:	460a      	mov	r2, r1
 8001262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001266:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800126a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8001272:	4a9a      	ldr	r2, [pc, #616]	@ (80014dc <_vl53l8cx_send_xtalk_data+0x28c>)
 8001274:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8001280:	4a97      	ldr	r2, [pc, #604]	@ (80014e0 <_vl53l8cx_send_xtalk_data+0x290>)
 8001282:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800128e:	4b95      	ldr	r3, [pc, #596]	@ (80014e4 <_vl53l8cx_send_xtalk_data+0x294>)
 8001290:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001294:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001298:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 80012a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80012b0:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80012b4:	4619      	mov	r1, r3
 80012b6:	f007 fe12 	bl	8008ede <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 80012ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012be:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b10      	cmp	r3, #16
 80012c6:	f040 80d2 	bne.w	800146e <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80012ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80012d8:	461a      	mov	r2, r3
 80012da:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80012de:	cb03      	ldmia	r3!, {r0, r1}
 80012e0:	6010      	str	r0, [r2, #0]
 80012e2:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80012e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80012f2:	461a      	mov	r2, r3
 80012f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80012f8:	cb03      	ldmia	r3!, {r0, r1}
 80012fa:	6010      	str	r0, [r2, #0]
 80012fc:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 80012fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001302:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800130c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fffe 	bl	8002312 <VL53L8CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001316:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800131a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132c:	4618      	mov	r0, r3
 800132e:	f007 fdd6 	bl	8008ede <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001332:	2300      	movs	r3, #0
 8001334:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001338:	e05d      	b.n	80013f6 <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001340:	e04e      	b.n	80013e0 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8001342:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8001346:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	005a      	lsls	r2, r3, #1
 8001350:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001354:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001358:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 800135c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001360:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001370:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001378:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800137a:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800137e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3304      	adds	r3, #4
 8001388:	0059      	lsls	r1, r3, #1
 800138a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800138e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001396:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001398:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800139c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	f103 0109 	add.w	r1, r3, #9
 80013aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013b6:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80013b8:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80013bc:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80013c4:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80013c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80013d2:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80013e0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	ddac      	ble.n	8001342 <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80013e8:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80013f6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	dd9d      	ble.n	800133a <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	3340      	adds	r3, #64	@ 0x40
 8001404:	22c0      	movs	r2, #192	@ 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f007 fced 	bl	8008de8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800140e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001412:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 800141c:	f107 0108 	add.w	r1, r7, #8
 8001420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001424:	4618      	mov	r0, r3
 8001426:	f007 fd5a 	bl	8008ede <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L8CX_SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 800142a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800142e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001438:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800143c:	4618      	mov	r0, r3
 800143e:	f000 ff68 	bl	8002312 <VL53L8CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8001442:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001446:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8001450:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001454:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8001456:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800145a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8001464:	2204      	movs	r2, #4
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f007 fcbd 	bl	8008de8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800146e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001472:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001476:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8001478:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800147c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8001486:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800148a:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800148e:	f000 ff1e 	bl	80022ce <VL53L8CX_WrMulti>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800149a:	4313      	orrs	r3, r2
 800149c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80014a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014a4:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80014a8:	2303      	movs	r3, #3
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	23ff      	movs	r3, #255	@ 0xff
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80014b4:	2201      	movs	r2, #1
 80014b6:	2104      	movs	r1, #4
 80014b8:	6800      	ldr	r0, [r0, #0]
 80014ba:	f7ff fc6a 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80014cc:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08009a80 	.word	0x08009a80
 80014e0:	08009a88 	.word	0x08009a88
 80014e4:	0001fca0 	.word	0x0001fca0

080014e8 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80014f4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80014f8:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80014fa:	2301      	movs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
	uint32_t crc_checksum = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a80      	ldr	r2, [pc, #512]	@ (8001708 <vl53l8cx_init+0x220>)
 8001506:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a80      	ldr	r2, [pc, #512]	@ (800170c <vl53l8cx_init+0x224>)
 800150c:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fec4 	bl	80022ac <VL53L8CX_WrByte>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	4313      	orrs	r3, r2
 800152c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2204      	movs	r2, #4
 8001532:	2109      	movs	r1, #9
 8001534:	4618      	mov	r0, r3
 8001536:	f000 feb9 	bl	80022ac <VL53L8CX_WrByte>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	4313      	orrs	r3, r2
 8001542:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2240      	movs	r2, #64	@ 0x40
 8001548:	210f      	movs	r1, #15
 800154a:	4618      	mov	r0, r3
 800154c:	f000 feae 	bl	80022ac <VL53L8CX_WrByte>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	4313      	orrs	r3, r2
 8001558:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	210a      	movs	r1, #10
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fea3 	bl	80022ac <VL53L8CX_WrByte>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	4313      	orrs	r3, r2
 800156e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f107 0216 	add.w	r2, r7, #22
 8001576:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fe86 	bl	800228c <VL53L8CX_RdByte>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	4313      	orrs	r3, r2
 8001588:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	210c      	movs	r1, #12
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fe8b 	bl	80022ac <VL53L8CX_WrByte>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	4313      	orrs	r3, r2
 800159e:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f240 1101 	movw	r1, #257	@ 0x101
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fe7f 	bl	80022ac <VL53L8CX_WrByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fe73 	bl	80022ac <VL53L8CX_WrByte>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fe67 	bl	80022ac <VL53L8CX_WrByte>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f244 0102 	movw	r1, #16386	@ 0x4002
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe5b 	bl	80022ac <VL53L8CX_WrByte>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fe4f 	bl	80022ac <VL53L8CX_WrByte>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	4313      	orrs	r3, r2
 8001616:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fe43 	bl	80022ac <VL53L8CX_WrByte>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	4313      	orrs	r3, r2
 800162e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f240 1103 	movw	r1, #259	@ 0x103
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fe37 	bl	80022ac <VL53L8CX_WrByte>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	4313      	orrs	r3, r2
 8001646:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	210c      	movs	r1, #12
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fe2c 	bl	80022ac <VL53L8CX_WrByte>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	4313      	orrs	r3, r2
 800165c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2243      	movs	r2, #67	@ 0x43
 8001662:	210f      	movs	r1, #15
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fe21 	bl	80022ac <VL53L8CX_WrByte>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	4313      	orrs	r3, r2
 8001672:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fe80 	bl	800237e <VL53L8CX_WaitMs>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	4313      	orrs	r3, r2
 8001686:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2240      	movs	r2, #64	@ 0x40
 800168c:	210f      	movs	r1, #15
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fe0c 	bl	80022ac <VL53L8CX_WrByte>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	4313      	orrs	r3, r2
 800169c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	210a      	movs	r1, #10
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fe01 	bl	80022ac <VL53L8CX_WrByte>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WaitMs(&(p_dev->platform), 100);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2164      	movs	r1, #100	@ 0x64
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fe60 	bl	800237e <VL53L8CX_WaitMs>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fdeb 	bl	80022ac <VL53L8CX_WrByte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4313      	orrs	r3, r2
 80016de:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	23ff      	movs	r3, #255	@ 0xff
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2306      	movs	r3, #6
 80016ea:	2200      	movs	r2, #0
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fb4f 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8309 	bne.w	8001d18 <vl53l8cx_init+0x830>
 8001706:	e003      	b.n	8001710 <vl53l8cx_init+0x228>
 8001708:	0801ef08 	.word	0x0801ef08
 800170c:	0801eb3c 	.word	0x0801eb3c
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	210e      	movs	r1, #14
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fdc8 	bl	80022ac <VL53L8CX_WrByte>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	4313      	orrs	r3, r2
 8001724:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2202      	movs	r2, #2
 800172a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fdbc 	bl	80022ac <VL53L8CX_WrByte>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	4313      	orrs	r3, r2
 800173c:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fdb0 	bl	80022ac <VL53L8CX_WrByte>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	4313      	orrs	r3, r2
 8001754:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x01);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	2106      	movs	r1, #6
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fda5 	bl	80022ac <VL53L8CX_WrByte>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	4313      	orrs	r3, r2
 800176a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0xFF, 0x4);
 800176c:	2304      	movs	r3, #4
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	23ff      	movs	r3, #255	@ 0xff
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2321      	movs	r3, #33	@ 0x21
 8001776:	2200      	movs	r2, #0
 8001778:	2101      	movs	r1, #1
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fb09 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	4313      	orrs	r3, r2
 8001788:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd8a 	bl	80022ac <VL53L8CX_WrByte>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	4313      	orrs	r3, r2
 80017a0:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f107 0216 	add.w	r2, r7, #22
 80017a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd6d 	bl	800228c <VL53L8CX_RdByte>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	210c      	movs	r1, #12
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fd72 	bl	80022ac <VL53L8CX_WrByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fd66 	bl	80022ac <VL53L8CX_WrByte>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f240 1101 	movw	r1, #257	@ 0x101
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd5a 	bl	80022ac <VL53L8CX_WrByte>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	4313      	orrs	r3, r2
 8001800:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd4e 	bl	80022ac <VL53L8CX_WrByte>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	4313      	orrs	r3, r2
 8001818:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fd42 	bl	80022ac <VL53L8CX_WrByte>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	4313      	orrs	r3, r2
 8001830:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f244 0102 	movw	r1, #16386	@ 0x4002
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fd36 	bl	80022ac <VL53L8CX_WrByte>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	4313      	orrs	r3, r2
 8001848:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fd2a 	bl	80022ac <VL53L8CX_WrByte>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	4313      	orrs	r3, r2
 8001860:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd1e 	bl	80022ac <VL53L8CX_WrByte>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	4313      	orrs	r3, r2
 8001878:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f240 1103 	movw	r1, #259	@ 0x103
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd12 	bl	80022ac <VL53L8CX_WrByte>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	4313      	orrs	r3, r2
 8001890:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f244 010f 	movw	r1, #16399	@ 0x400f
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fd06 	bl	80022ac <VL53L8CX_WrByte>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2243      	movs	r2, #67	@ 0x43
 80018ae:	f240 211a 	movw	r1, #538	@ 0x21a
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fcfa 	bl	80022ac <VL53L8CX_WrByte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	4313      	orrs	r3, r2
 80018c0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f240 211a 	movw	r1, #538	@ 0x21a
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fcee 	bl	80022ac <VL53L8CX_WrByte>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f240 211a 	movw	r1, #538	@ 0x21a
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fce2 	bl	80022ac <VL53L8CX_WrByte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f240 211a 	movw	r1, #538	@ 0x21a
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fcd6 	bl	80022ac <VL53L8CX_WrByte>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	4313      	orrs	r3, r2
 8001908:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f240 2119 	movw	r1, #537	@ 0x219
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fcca 	bl	80022ac <VL53L8CX_WrByte>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	4313      	orrs	r3, r2
 8001920:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f240 211b 	movw	r1, #539	@ 0x21b
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fcbe 	bl	80022ac <VL53L8CX_WrByte>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	4313      	orrs	r3, r2
 8001938:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fcb2 	bl	80022ac <VL53L8CX_WrByte>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4313      	orrs	r3, r2
 8001950:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f107 0216 	add.w	r2, r7, #22
 8001958:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fc95 	bl	800228c <VL53L8CX_RdByte>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	4313      	orrs	r3, r2
 800196a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fc99 	bl	80022ac <VL53L8CX_WrByte>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	4313      	orrs	r3, r2
 8001982:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L8CX */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2209      	movs	r2, #9
 8001988:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fc8d 	bl	80022ac <VL53L8CX_WrByte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	4313      	orrs	r3, r2
 800199a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019a2:	4ade      	ldr	r2, [pc, #888]	@ (8001d1c <vl53l8cx_init+0x834>)
 80019a4:	2100      	movs	r1, #0
 80019a6:	f000 fc92 	bl	80022ce <VL53L8CX_WrMulti>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	220a      	movs	r2, #10
 80019b8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fc75 	bl	80022ac <VL53L8CX_WrByte>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019d2:	4ad3      	ldr	r2, [pc, #844]	@ (8001d20 <vl53l8cx_init+0x838>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	f000 fc7a 	bl	80022ce <VL53L8CX_WrMulti>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	220b      	movs	r2, #11
 80019e8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fc5d 	bl	80022ac <VL53L8CX_WrByte>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrMulti(&(p_dev->platform),0,
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001a02:	4ac8      	ldr	r2, [pc, #800]	@ (8001d24 <vl53l8cx_init+0x83c>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	f000 fc62 	bl	80022ce <VL53L8CX_WrMulti>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fc45 	bl	80022ac <VL53L8CX_WrByte>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fc39 	bl	80022ac <VL53L8CX_WrByte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x06, 0x03);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	2106      	movs	r1, #6
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fc2e 	bl	80022ac <VL53L8CX_WrByte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	75fb      	strb	r3, [r7, #23]

	status |= VL53L8CX_WaitMs(&(p_dev->platform), 5);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fc8d 	bl	800237e <VL53L8CX_WaitMs>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fc18 	bl	80022ac <VL53L8CX_WrByte>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f107 0216 	add.w	r2, r7, #22
 8001a8c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fbfb 	bl	800228c <VL53L8CX_RdByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	210c      	movs	r1, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fc00 	bl	80022ac <VL53L8CX_WrByte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fbf4 	bl	80022ac <VL53L8CX_WrByte>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fbe8 	bl	80022ac <VL53L8CX_WrByte>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f240 1115 	movw	r1, #277	@ 0x115
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fbdc 	bl	80022ac <VL53L8CX_WrByte>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2242      	movs	r2, #66	@ 0x42
 8001b02:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fbd0 	bl	80022ac <VL53L8CX_WrByte>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f240 1117 	movw	r1, #279	@ 0x117
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fbc4 	bl	80022ac <VL53L8CX_WrByte>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	210b      	movs	r1, #11
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fbb9 	bl	80022ac <VL53L8CX_WrByte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f107 0216 	add.w	r2, r7, #22
 8001b4a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fb9c 	bl	800228c <VL53L8CX_RdByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	210c      	movs	r1, #12
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fba1 	bl	80022ac <VL53L8CX_WrByte>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	75fb      	strb	r3, [r7, #23]
	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	210b      	movs	r1, #11
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fb96 	bl	80022ac <VL53L8CX_WrByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff f951 	bl	8000e32 <_vl53l8cx_poll_for_mcu_boot>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 80c9 	bne.w	8001d34 <vl53l8cx_init+0x84c>
		goto exit;
	}

	status |= VL53L8CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fb7e 	bl	80022ac <VL53L8CX_WrByte>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	75fb      	strb	r3, [r7, #23]

	/* Firmware checksum */
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001bba:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, 4);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L8CX_RdMulti(&(p_dev->platform), (uint16_t)(0x812FFC & 0xFFFF),
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8001bc8:	f000 fb92 	bl	80022f0 <VL53L8CX_RdMulti>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	75fb      	strb	r3, [r7, #23]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, 4);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fb97 	bl	8002312 <VL53L8CX_SwapBuffer>
	memcpy((uint8_t*)&crc_checksum, &(p_dev->temp_buffer[0]), 4);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60bb      	str	r3, [r7, #8]
	if (crc_checksum != (uint32_t)0xc0b6c9e)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8001d28 <vl53l8cx_init+0x840>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d004      	beq.n	8001c00 <vl53l8cx_init+0x718>
	{
		status |= VL53L8CX_STATUS_FW_CHECKSUM_FAIL;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	f043 0305 	orr.w	r3, r3, #5
 8001bfc:	75fb      	strb	r3, [r7, #23]
		goto exit;
 8001bfe:	e09a      	b.n	8001d36 <vl53l8cx_init+0x84e>
	}

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	2328      	movs	r3, #40	@ 0x28
 8001c04:	4a49      	ldr	r2, [pc, #292]	@ (8001d2c <vl53l8cx_init+0x844>)
 8001c06:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8001c0a:	f000 fb60 	bl	80022ce <VL53L8CX_WrMulti>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	23ff      	movs	r3, #255	@ 0xff
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001c24:	2200      	movs	r2, #0
 8001c26:	2104      	movs	r1, #4
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff f8b2 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001c38:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L8CX_RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8001c40:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8001c44:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8001c48:	f000 fb52 	bl	80022f0 <VL53L8CX_RdMulti>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f103 0010 	add.w	r0, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c62:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001c66:	4619      	mov	r1, r3
 8001c68:	f007 f939 	bl	8008ede <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff f922 	bl	8000eb8 <_vl53l8cx_send_offset_data>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001c84:	4a2a      	ldr	r2, [pc, #168]	@ (8001d30 <vl53l8cx_init+0x848>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f007 f925 	bl	8008ede <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 8001c94:	2110      	movs	r1, #16
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fada 	bl	8001250 <_vl53l8cx_send_xtalk_data>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= VL53L8CX_WrMulti(&(p_dev->platform), 0x2c34,
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8001cb0:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8001cb4:	f000 fb0b 	bl	80022ce <VL53L8CX_WrMulti>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	23ff      	movs	r3, #255	@ 0xff
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff f85d 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001ce2:	f107 0110 	add.w	r1, r7, #16
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fa2f 	bl	8002150 <vl53l8cx_dci_write_data>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001cfc:	f107 010c 	add.w	r1, r7, #12
 8001d00:	2304      	movs	r3, #4
 8001d02:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa22 	bl	8002150 <vl53l8cx_dci_write_data>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	e00e      	b.n	8001d36 <vl53l8cx_init+0x84e>
		goto exit;
 8001d18:	bf00      	nop
 8001d1a:	e00c      	b.n	8001d36 <vl53l8cx_init+0x84e>
 8001d1c:	08009b3c 	.word	0x08009b3c
 8001d20:	08011b3c 	.word	0x08011b3c
 8001d24:	08019b3c 	.word	0x08019b3c
 8001d28:	0c0b6c9e 	.word	0x0c0b6c9e
 8001d2c:	0801f210 	.word	0x0801f210
 8001d30:	0801ef08 	.word	0x0801ef08
		goto exit;
 8001d34:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <vl53l8cx_get_ranging_data>:
}

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8001d4e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L8CX_RdMulti(&(p_dev->platform), 0x0,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f000 fac8 	bl	80022f0 <VL53L8CX_RdMulti>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	709a      	strb	r2, [r3, #2]
	VL53L8CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 fac5 	bl	8002312 <VL53L8CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8001d88:	2310      	movs	r3, #16
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e10e      	b.n	8001fac <vl53l8cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d915      	bls.n	8001dd4 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d80e      	bhi.n	8001dd4 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e005      	b.n	8001de0 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8001de8:	4293      	cmp	r3, r2
 8001dea:	f000 80bb 	beq.w	8001f64 <vl53l8cx_get_ranging_data+0x224>
 8001dee:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8001df2:	4293      	cmp	r3, r2
 8001df4:	f300 80d2 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001df8:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	f000 80a3 	beq.w	8001f48 <vl53l8cx_get_ranging_data+0x208>
 8001e02:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f300 80c8 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e0c:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f000 808b 	beq.w	8001f2c <vl53l8cx_get_ranging_data+0x1ec>
 8001e16:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	f300 80be 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e20:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d073      	beq.n	8001f10 <vl53l8cx_get_ranging_data+0x1d0>
 8001e28:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f300 80b5 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e32:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d05c      	beq.n	8001ef4 <vl53l8cx_get_ranging_data+0x1b4>
 8001e3a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f300 80ac 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e44:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d045      	beq.n	8001ed8 <vl53l8cx_get_ranging_data+0x198>
 8001e4c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f300 80a3 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e56:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f000 8090 	beq.w	8001f80 <vl53l8cx_get_ranging_data+0x240>
 8001e60:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8001e64:	4293      	cmp	r3, r2
 8001e66:	f300 8099 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e6a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d024      	beq.n	8001ebc <vl53l8cx_get_ranging_data+0x17c>
 8001e72:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f300 8090 	bgt.w	8001f9c <vl53l8cx_get_ranging_data+0x25c>
 8001e7c:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d004      	beq.n	8001e8e <vl53l8cx_get_ranging_data+0x14e>
 8001e84:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00a      	beq.n	8001ea2 <vl53l8cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8001e8c:	e086      	b.n	8001f9c <vl53l8cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	330c      	adds	r3, #12
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8001e9a:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
				break;
 8001ea0:	e07d      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f007 f812 	bl	8008ede <memcpy>
				break;
 8001eba:	e070      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f007 f804 	bl	8008ede <memcpy>
				break;
 8001ed6:	e062      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f006 fff6 	bl	8008ede <memcpy>
				break;
 8001ef2:	e054      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	3304      	adds	r3, #4
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f006 ffe8 	bl	8008ede <memcpy>
				break;
 8001f0e:	e046      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f006 ffda 	bl	8008ede <memcpy>
				break;
 8001f2a:	e038      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	3304      	adds	r3, #4
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f006 ffcc 	bl	8008ede <memcpy>
				break;
 8001f46:	e02a      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3304      	adds	r3, #4
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f006 ffbe 	bl	8008ede <memcpy>
				break;
 8001f62:	e01c      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f006 ffb0 	bl	8008ede <memcpy>
				break;
 8001f7e:	e00e      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f006 ffa2 	bl	8008ede <memcpy>
				break;
 8001f9a:	e000      	b.n	8001f9e <vl53l8cx_get_ranging_data+0x25e>
				break;
 8001f9c:	bf00      	nop
		}
		i += msize;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f4ff aeeb 	bcc.w	8001d8e <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	e00d      	b.n	8001fda <vl53l8cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0ada      	lsrs	r2, r3, #11
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fde:	d9ee      	bls.n	8001fbe <vl53l8cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e044      	b.n	8002070 <vl53l8cx_get_ranging_data+0x330>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da00      	bge.n	8001ffc <vl53l8cx_get_ranging_data+0x2bc>
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	109b      	asrs	r3, r3, #2
 8001ffe:	b219      	sxth	r1, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	460a      	mov	r2, r1
 800200e:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4413      	add	r3, r2
 8002016:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	b2d9      	uxtb	r1, r3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4413      	add	r3, r2
 8002026:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800202a:	460a      	mov	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	09db      	lsrs	r3, r3, #7
 800203e:	b299      	uxth	r1, r3
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	460a      	mov	r2, r1
 800204e:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3390      	adds	r3, #144	@ 0x90
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0ada      	lsrs	r2, r3, #11
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3390      	adds	r3, #144	@ 0x90
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	3301      	adds	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b3f      	cmp	r3, #63	@ 0x3f
 8002074:	d9b7      	bls.n	8001fe6 <vl53l8cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e01b      	b.n	80020b4 <vl53l8cx_get_ranging_data+0x374>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4413      	add	r3, r2
 8002082:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d110      	bne.n	80020ae <vl53l8cx_get_ranging_data+0x36e>
			for(j = 0; j < (uint32_t)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00a      	b.n	80020a8 <vl53l8cx_get_ranging_data+0x368>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4413      	add	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	22ff      	movs	r2, #255	@ 0xff
 800209e:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f1      	beq.n	8002092 <vl53l8cx_get_ranging_data+0x352>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80020b8:	d9e0      	bls.n	800207c <vl53l8cx_get_ranging_data+0x33c>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e014      	b.n	80020ea <vl53l8cx_get_ranging_data+0x3aa>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <vl53l8cx_get_ranging_data+0x40c>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0bda      	lsrs	r2, r3, #15
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b1f      	cmp	r3, #31
 80020ee:	d9e7      	bls.n	80020c0 <vl53l8cx_get_ranging_data+0x380>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8002100:	461a      	mov	r2, r3
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	4313      	orrs	r3, r2
 8002106:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800210c:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 800211e:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8002128:	461a      	mov	r2, r3
 800212a:	89bb      	ldrh	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8002130:	89fa      	ldrh	r2, [r7, #14]
 8002132:	89bb      	ldrh	r3, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d003      	beq.n	8002140 <vl53l8cx_get_ranging_data+0x400>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8002138:	7ffb      	ldrb	r3, [r7, #31]
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8002140:	7ffb      	ldrb	r3, [r7, #31]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	80008001 	.word	0x80008001

08002150 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002168:	2300      	movs	r3, #0
 800216a:	753b      	strb	r3, [r7, #20]
 800216c:	2300      	movs	r3, #0
 800216e:	757b      	strb	r3, [r7, #21]
 8002170:	2300      	movs	r3, #0
 8002172:	75bb      	strb	r3, [r7, #22]
 8002174:	230f      	movs	r3, #15
 8002176:	75fb      	strb	r3, [r7, #23]
 8002178:	2305      	movs	r3, #5
 800217a:	763b      	strb	r3, [r7, #24]
 800217c:	2301      	movs	r3, #1
 800217e:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	3308      	adds	r3, #8
 8002184:	121b      	asrs	r3, r3, #8
 8002186:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002188:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3308      	adds	r3, #8
 8002190:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002192:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 800219a:	3334      	adds	r3, #52	@ 0x34
 800219c:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80021a4:	d903      	bls.n	80021ae <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 80021a6:	23ff      	movs	r3, #255	@ 0xff
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021ac:	e068      	b.n	8002280 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	111b      	asrs	r3, r3, #4
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L8CX_SwapBuffer(data, data_size);
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	4619      	mov	r1, r3
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f000 f89d 	bl	8002312 <VL53L8CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80021e0:	e012      	b.n	8002208 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80021e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	441a      	add	r2, r3
 80021ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80021ee:	3304      	adds	r3, #4
 80021f0:	7811      	ldrb	r1, [r2, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	460a      	mov	r2, r1
 80021f8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80021fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002208:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	dae8      	bge.n	80021e2 <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	3304      	adds	r3, #4
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	461a      	mov	r2, r3
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	cb03      	ldmia	r3!, {r0, r1}
 800222e:	6010      	str	r0, [r2, #0]
 8002230:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 8002232:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800223a:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L8CX_WrMulti(&(p_dev->platform),address,
 800223c:	330c      	adds	r3, #12
 800223e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002240:	f000 f845 	bl	80022ce <VL53L8CX_WrMulti>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800224c:	4313      	orrs	r3, r2
 800224e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8002252:	2303      	movs	r3, #3
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	23ff      	movs	r3, #255	@ 0xff
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800225e:	2201      	movs	r2, #1
 8002260:	2104      	movs	r1, #4
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7fe fd95 	bl	8000d92 <_vl53l8cx_poll_for_answer>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002270:	4313      	orrs	r3, r2
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L8CX_SwapBuffer(data, data_size);
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	4619      	mov	r1, r3
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f000 f849 	bl	8002312 <VL53L8CX_SwapBuffer>
	}

	return status;
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <VL53L8CX_RdByte>:

uint8_t VL53L8CX_RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	460b      	mov	r3, r1
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 800229a:	23ff      	movs	r3, #255	@ 0xff
 800229c:	75fb      	strb	r3, [r7, #23]
	
	/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <VL53L8CX_WrByte>:

uint8_t VL53L8CX_WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
	uint8_t status = 255;
 80022bc:	23ff      	movs	r3, #255	@ 0xff
 80022be:	73fb      	strb	r3, [r7, #15]

	/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <VL53L8CX_WrMulti>:
uint8_t VL53L8CX_WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	460b      	mov	r3, r1
 80022dc:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 80022de:	23ff      	movs	r3, #255	@ 0xff
 80022e0:	75fb      	strb	r3, [r7, #23]
	
		/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <VL53L8CX_RdMulti>:
uint8_t VL53L8CX_RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 8002300:	23ff      	movs	r3, #255	@ 0xff
 8002302:	75fb      	strb	r3, [r7, #23]
	
	/* Need to be implemented by customer. This function returns 0 if OK */
	
	return status;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <VL53L8CX_SwapBuffer>:
}

void VL53L8CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e021      	b.n	8002368 <VL53L8CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	440b      	add	r3, r1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3302      	adds	r3, #2
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	440b      	add	r3, r1
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	3203      	adds	r2, #3
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	440a      	add	r2, r1
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	4313      	orrs	r3, r2
		tmp = (
 8002356:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3d9      	bcc.n	8002324 <VL53L8CX_SwapBuffer+0x12>
	}
}	
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <VL53L8CX_WaitMs>:

uint8_t VL53L8CX_WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	uint8_t status = 255;
 8002388:	23ff      	movs	r3, #255	@ 0xff
 800238a:	73fb      	strb	r3, [r7, #15]

	/* Need to be implemented by customer. This function returns 0 if OK */
	
	return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f94f 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7fe fb2c 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f967 	bl	80026d2 <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f92f 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000000 	.word	0x20000000
 8002438:	20000008 	.word	0x20000008
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	20000c98 	.word	0x20000c98

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000c98 	.word	0x20000c98

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e159      	b.n	80029bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8148 	bne.w	80029b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d005      	beq.n	800273e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	2b02      	cmp	r3, #2
 800273c:	d130      	bne.n	80027a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 0201 	and.w	r2, r3, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d017      	beq.n	80027dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a2 	beq.w	80029b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b57      	ldr	r3, [pc, #348]	@ (80029d4 <HAL_GPIO_Init+0x2e8>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a56      	ldr	r2, [pc, #344]	@ (80029d4 <HAL_GPIO_Init+0x2e8>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b54      	ldr	r3, [pc, #336]	@ (80029d4 <HAL_GPIO_Init+0x2e8>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288e:	4a52      	ldr	r2, [pc, #328]	@ (80029d8 <HAL_GPIO_Init+0x2ec>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a49      	ldr	r2, [pc, #292]	@ (80029dc <HAL_GPIO_Init+0x2f0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x202>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a48      	ldr	r2, [pc, #288]	@ (80029e0 <HAL_GPIO_Init+0x2f4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x1fe>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a47      	ldr	r2, [pc, #284]	@ (80029e4 <HAL_GPIO_Init+0x2f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x1fa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <HAL_GPIO_Init+0x2fc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x1f6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a45      	ldr	r2, [pc, #276]	@ (80029ec <HAL_GPIO_Init+0x300>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x1f2>
 80028da:	2304      	movs	r3, #4
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x204>
 80028de:	2307      	movs	r3, #7
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x204>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x204>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x204>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x204>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	@ (80029d8 <HAL_GPIO_Init+0x2ec>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b38      	ldr	r3, [pc, #224]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a2f      	ldr	r2, [pc, #188]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002962:	4b23      	ldr	r3, [pc, #140]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002986:	4a1a      	ldr	r2, [pc, #104]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298c:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b0:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_GPIO_Init+0x304>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f aea2 	bls.w	8002708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43d9      	mvns	r1, r3
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	400b      	ands	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e101      	b.n	8002c3e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fcbb 	bl	80083d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a68:	d102      	bne.n	8002a70 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fc34 	bl	80052e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7c1a      	ldrb	r2, [r3, #16]
 8002a82:	f88d 2000 	strb.w	r2, [sp]
 8002a86:	3304      	adds	r3, #4
 8002a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8a:	f002 fb13 	bl	80050b4 <USB_CoreInit>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ce      	b.n	8002c3e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fc2c 	bl	8005304 <USB_SetCurrentMode>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0bf      	b.n	8002c3e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e04a      	b.n	8002b5a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3315      	adds	r3, #21
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	b298      	uxth	r0, r3
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	332e      	adds	r3, #46	@ 0x2e
 8002b00:	4602      	mov	r2, r0
 8002b02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3318      	adds	r3, #24
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	331c      	adds	r3, #28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3324      	adds	r3, #36	@ 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	3301      	adds	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3af      	bcc.n	8002ac4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e044      	b.n	8002bf4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	791b      	ldrb	r3, [r3, #4]
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3b5      	bcc.n	8002b6a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7c1a      	ldrb	r2, [r3, #16]
 8002c06:	f88d 2000 	strb.w	r2, [sp]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0e:	f002 fbc5 	bl	800539c <USB_DevInit>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00c      	b.n	8002c3e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fc0f 	bl	800645a <USB_DevDisconnect>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_PCD_Start+0x1c>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e022      	b.n	8002ca8 <HAL_PCD_Start+0x62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fb16 	bl	80052c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fbbd 	bl	8006418 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08d      	sub	sp, #52	@ 0x34
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fc7b 	bl	80065c2 <USB_GetMode>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 848c 	bne.w	80035ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fbdf 	bl	800649c <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8482 	beq.w	80035ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fbcc 	bl	800649c <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d107      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 0202 	and.w	r2, r2, #2
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fbba 	bl	800649c <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d161      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0210 	bic.w	r2, r2, #16
 8002d40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	0c5b      	lsrs	r3, r3, #17
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d124      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d035      	beq.n	8002de6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	f003 f9f1 	bl	8006174 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9e:	441a      	add	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db0:	441a      	add	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	615a      	str	r2, [r3, #20]
 8002db6:	e016      	b.n	8002de6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	0c5b      	lsrs	r3, r3, #17
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	2b06      	cmp	r3, #6
 8002dc2:	d110      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6a38      	ldr	r0, [r7, #32]
 8002dd0:	f003 f9d0 	bl	8006174 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de0:	441a      	add	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0210 	orr.w	r2, r2, #16
 8002df4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fb4e 	bl	800649c <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e0a:	f040 80a7 	bne.w	8002f5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fb53 	bl	80064c2 <USB_ReadDevAllOutEpInterrupt>
 8002e1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e1e:	e099      	b.n	8002f54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 808e 	beq.w	8002f48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fb77 	bl	800652a <USB_ReadDevOutEPInterrupt>
 8002e3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2301      	movs	r3, #1
 8002e58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fe8b 	bl	8003b78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 ff61 	bl	8003d48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d030      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb4:	2b80      	cmp	r3, #128	@ 0x80
 8002eb6:	d109      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f005 fb70 	bl	80085dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2320      	movs	r3, #32
 8002f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f af62 	bne.w	8002e20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa9b 	bl	800649c <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f70:	f040 80db 	bne.w	800312a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fabc 	bl	80064f6 <USB_ReadDevAllInEpInterrupt>
 8002f7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002f84:	e0cd      	b.n	8003122 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80c2 	beq.w	8003116 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fae2 	bl	8006566 <USB_ReadDevInEPInterrupt>
 8002fa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d057      	beq.n	800305e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69f9      	ldr	r1, [r7, #28]
 8002fca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fce:	4013      	ands	r3, r2
 8002fd0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	799b      	ldrb	r3, [r3, #6]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d132      	bne.n	8003052 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	331c      	adds	r3, #28
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4419      	add	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4403      	add	r3, r0
 8003020:	3320      	adds	r3, #32
 8003022:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <HAL_PCD_IRQHandler+0x3a2>
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3324      	adds	r3, #36	@ 0x24
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800304a:	461a      	mov	r2, r3
 800304c:	2101      	movs	r1, #1
 800304e:	f003 fae9 	bl	8006624 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f005 fa3a 	bl	80084d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003074:	461a      	mov	r2, r3
 8003076:	2308      	movs	r3, #8
 8003078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003090:	461a      	mov	r2, r3
 8003092:	2310      	movs	r3, #16
 8003094:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ac:	461a      	mov	r2, r3
 80030ae:	2340      	movs	r3, #64	@ 0x40
 80030b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d023      	beq.n	8003104 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030be:	6a38      	ldr	r0, [r7, #32]
 80030c0:	f002 fad0 	bl	8005664 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3310      	adds	r3, #16
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	78db      	ldrb	r3, [r3, #3]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f005 fa87 	bl	8008600 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	2302      	movs	r3, #2
 8003102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800310e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fca5 	bl	8003a60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f af2e 	bne.w	8002f86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f9b4 	bl	800649c <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800313a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800313e:	d122      	bne.n	8003186 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003166:	2100      	movs	r1, #0
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fe8b 	bl	8003e84 <HAL_PCDEx_LPM_Callback>
 800316e:	e002      	b.n	8003176 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f005 fa25 	bl	80085c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 f986 	bl	800649c <USB_ReadInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319a:	d112      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f005 f9e1 	bl	8008574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80031c0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 f968 	bl	800649c <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	f040 80b7 	bne.w	8003348 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2110      	movs	r1, #16
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 fa35 	bl	8005664 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031fe:	e046      	b.n	800328e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800320c:	461a      	mov	r2, r3
 800320e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003212:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800322e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003232:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003240:	461a      	mov	r2, r3
 8003242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003246:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	440a      	add	r2, r1
 800325e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003262:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003266:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	440a      	add	r2, r1
 800327e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003282:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003286:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	3301      	adds	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	791b      	ldrb	r3, [r3, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003296:	4293      	cmp	r3, r2
 8003298:	d3b2      	bcc.n	8003200 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80032ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7bdb      	ldrb	r3, [r3, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032c6:	f043 030b 	orr.w	r3, r3, #11
 80032ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032dc:	f043 030b 	orr.w	r3, r3, #11
 80032e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e2:	e015      	b.n	8003310 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80032fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800330a:	f043 030b 	orr.w	r3, r3, #11
 800330e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800331e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003322:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003332:	461a      	mov	r2, r3
 8003334:	f003 f976 	bl	8006624 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f8a5 	bl	800649c <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335c:	d123      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f003 f93b 	bl	80065de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f002 f9f2 	bl	8005756 <USB_GetDevSpeed>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681c      	ldr	r4, [r3, #0]
 800337e:	f001 fa59 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8003382:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003388:	461a      	mov	r2, r3
 800338a:	4620      	mov	r0, r4
 800338c:	f001 fef6 	bl	800517c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f005 f8c6 	bl	8008522 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 f876 	bl	800649c <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d10a      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f005 f8a3 	bl	8008506 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f002 0208 	and.w	r2, r2, #8
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 f861 	bl	800649c <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e0:	2b80      	cmp	r3, #128	@ 0x80
 80033e2:	d123      	bne.n	800342c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	e014      	b.n	8003420 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 faf2 	bl	80039fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	3301      	adds	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	461a      	mov	r2, r3
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	4293      	cmp	r3, r2
 800342a:	d3e4      	bcc.n	80033f6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f003 f833 	bl	800649c <USB_ReadInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003440:	d13c      	bne.n	80034bc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
 8003446:	e02b      	b.n	80034a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3318      	adds	r3, #24
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d115      	bne.n	800349a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800346e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	da12      	bge.n	800349a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3317      	adds	r3, #23
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fab2 	bl	80039fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	791b      	ldrb	r3, [r3, #4]
 80034a4:	461a      	mov	r2, r3
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d3cd      	bcc.n	8003448 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80034ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 ffeb 	bl	800649c <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d0:	d156      	bne.n	8003580 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d2:	2301      	movs	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d6:	e045      	b.n	8003564 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d12e      	bne.n	800355e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003500:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	da2b      	bge.n	800355e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003512:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003516:	429a      	cmp	r2, r3
 8003518:	d121      	bne.n	800355e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800355a:	6053      	str	r3, [r2, #4]
            break;
 800355c:	e008      	b.n	8003570 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	3301      	adds	r3, #1
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	461a      	mov	r2, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	4293      	cmp	r3, r2
 800356e:	d3b3      	bcc.n	80034d8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800357e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f002 ff89 	bl	800649c <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d10a      	bne.n	80035ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f005 f844 	bl	8008624 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 ff73 	bl	800649c <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d115      	bne.n	80035ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f005 f834 	bl	8008640 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e000      	b.n	80035ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80035ea:	bf00      	nop
    }
  }
}
 80035ec:	3734      	adds	r7, #52	@ 0x34
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_SetAddress+0x1a>
 8003608:	2302      	movs	r3, #2
 800360a:	e012      	b.n	8003632 <HAL_PCD_SetAddress+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f002 fed2 	bl	80063cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	4608      	mov	r0, r1
 8003644:	4611      	mov	r1, r2
 8003646:	461a      	mov	r2, r3
 8003648:	4603      	mov	r3, r0
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	460b      	mov	r3, r1
 800364e:	803b      	strh	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da0f      	bge.n	8003680 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3310      	adds	r3, #16
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	705a      	strb	r2, [r3, #1]
 800367e:	e00f      	b.n	80036a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80036ac:	883b      	ldrh	r3, [r7, #0]
 80036ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	78ba      	ldrb	r2, [r7, #2]
 80036ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036ce:	78bb      	ldrb	r3, [r7, #2]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d102      	bne.n	80036da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_PCD_EP_Open+0xae>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e00e      	b.n	8003706 <HAL_PCD_EP_Open+0xcc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 f852 	bl	80057a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003704:	7afb      	ldrb	r3, [r7, #11]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800371a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371e:	2b00      	cmp	r3, #0
 8003720:	da0f      	bge.n	8003742 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3310      	adds	r3, #16
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	705a      	strb	r2, [r3, #1]
 8003740:	e00f      	b.n	8003762 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_PCD_EP_Close+0x6e>
 8003778:	2302      	movs	r3, #2
 800377a:	e00e      	b.n	800379a <HAL_PCD_EP_Close+0x8c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 f890 	bl	80058b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	460b      	mov	r3, r1
 80037b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	799b      	ldrb	r3, [r3, #6]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d102      	bne.n	80037fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	799b      	ldrb	r3, [r3, #6]
 8003806:	461a      	mov	r2, r3
 8003808:	6979      	ldr	r1, [r7, #20]
 800380a:	f002 f92d 	bl	8005a68 <USB_EPStartXfer>

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	460b      	mov	r3, r1
 8003826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3310      	adds	r3, #16
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2201      	movs	r2, #1
 8003856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	b2da      	uxtb	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	799b      	ldrb	r3, [r3, #6]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	799b      	ldrb	r3, [r3, #6]
 800387a:	461a      	mov	r2, r3
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	f002 f8f3 	bl	8005a68 <USB_EPStartXfer>

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	7912      	ldrb	r2, [r2, #4]
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e04f      	b.n	800394a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	da0f      	bge.n	80038d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3310      	adds	r3, #16
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	705a      	strb	r2, [r3, #1]
 80038d0:	e00d      	b.n	80038ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_PCD_EP_SetStall+0x82>
 800390a:	2302      	movs	r3, #2
 800390c:	e01d      	b.n	800394a <HAL_PCD_EP_SetStall+0xbe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68f9      	ldr	r1, [r7, #12]
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fc81 	bl	8006224 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7999      	ldrb	r1, [r3, #6]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800393a:	461a      	mov	r2, r3
 800393c:	f002 fe72 	bl	8006624 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	7912      	ldrb	r2, [r2, #4]
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e042      	b.n	80039f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	da0f      	bge.n	8003998 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	3310      	adds	r3, #16
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	705a      	strb	r2, [r3, #1]
 8003996:	e00f      	b.n	80039b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_PCD_EP_ClrStall+0x86>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e00e      	b.n	80039f6 <HAL_PCD_EP_ClrStall+0xa4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fc8a 	bl	8006300 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0c      	bge.n	8003a2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3310      	adds	r3, #16
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e00c      	b.n	8003a46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f002 faa9 	bl	8005fa4 <USB_EPStopXfer>
 8003a52:	4603      	mov	r3, r0
 8003a54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d901      	bls.n	8003a98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e06b      	b.n	8003b70 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d902      	bls.n	8003ab4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003abc:	e02a      	b.n	8003b14 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d902      	bls.n	8003ada <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3303      	adds	r3, #3
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4603      	mov	r3, r0
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f002 fafe 	bl	80060f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	441a      	add	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	441a      	add	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d809      	bhi.n	8003b3e <PCD_WriteEmptyTxFifo+0xde>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d203      	bcs.n	8003b3e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1bf      	bne.n	8003abe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d811      	bhi.n	8003b6e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	2201      	movs	r2, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	6939      	ldr	r1, [r7, #16]
 8003b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	333c      	adds	r3, #60	@ 0x3c
 8003b90:	3304      	adds	r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	799b      	ldrb	r3, [r3, #6]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d17b      	bne.n	8003ca6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d015      	beq.n	8003be4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4a61      	ldr	r2, [pc, #388]	@ (8003d40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f240 80b9 	bls.w	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80b3 	beq.w	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be0:	6093      	str	r3, [r2, #8]
 8003be2:	e0a7      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	6093      	str	r3, [r2, #8]
 8003c00:	e098      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 8093 	bne.w	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4a4b      	ldr	r2, [pc, #300]	@ (8003d40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d90f      	bls.n	8003c36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c32:	6093      	str	r3, [r2, #8]
 8003c34:	e07e      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	440b      	add	r3, r1
 8003c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	1ad2      	subs	r2, r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d114      	bne.n	8003c98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c80:	461a      	mov	r2, r3
 8003c82:	2101      	movs	r1, #1
 8003c84:	f002 fcce 	bl	8006624 <USB_EP0_OutStart>
 8003c88:	e006      	b.n	8003c98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f004 fbfc 	bl	800849c <HAL_PCD_DataOutStageCallback>
 8003ca4:	e046      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a26      	ldr	r2, [pc, #152]	@ (8003d44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d124      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e032      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f004 fbd3 	bl	800849c <HAL_PCD_DataOutStageCallback>
 8003cf6:	e01d      	b.n	8003d34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d114      	bne.n	8003d28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d20:	461a      	mov	r2, r3
 8003d22:	2100      	movs	r1, #0
 8003d24:	f002 fc7e 	bl	8006624 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f004 fbb4 	bl	800849c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	4f54300a 	.word	0x4f54300a
 8003d44:	4f54310a 	.word	0x4f54310a

08003d48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	333c      	adds	r3, #60	@ 0x3c
 8003d60:	3304      	adds	r3, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90e      	bls.n	8003d9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f004 fb6b 	bl	8008478 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d90c      	bls.n	8003dc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	799b      	ldrb	r3, [r3, #6]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	f002 fc30 	bl	8006624 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	4f54300a 	.word	0x4f54300a

08003dd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
 8003de0:	4613      	mov	r3, r2
 8003de2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003df2:	883b      	ldrh	r3, [r7, #0]
 8003df4:	0419      	lsls	r1, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e00:	e028      	b.n	8003e54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e00d      	b.n	8003e32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	3340      	adds	r3, #64	@ 0x40
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4413      	add	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3ec      	bcc.n	8003e16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e3c:	883b      	ldrh	r3, [r7, #0]
 8003e3e:	0418      	lsls	r0, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4302      	orrs	r2, r0
 8003e4c:	3340      	adds	r3, #64	@ 0x40
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e267      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d075      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eba:	4b88      	ldr	r3, [pc, #544]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec6:	4b85      	ldr	r3, [pc, #532]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d112      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed2:	4b82      	ldr	r3, [pc, #520]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05b      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x108>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d157      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e242      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCC_OscConfig+0x74>
 8003f02:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a75      	ldr	r2, [pc, #468]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f1a:	4b70      	ldr	r3, [pc, #448]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6f      	ldr	r2, [pc, #444]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b6d      	ldr	r3, [pc, #436]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6c      	ldr	r2, [pc, #432]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f34:	4b69      	ldr	r3, [pc, #420]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a68      	ldr	r2, [pc, #416]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b66      	ldr	r3, [pc, #408]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a65      	ldr	r2, [pc, #404]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe fa88 	bl	8002468 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fa84 	bl	8002468 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e207      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xc0>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fa74 	bl	8002468 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fa70 	bl	8002468 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	@ 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1f3      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	4b51      	ldr	r3, [pc, #324]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0xe8>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fbe:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fca:	4b44      	ldr	r3, [pc, #272]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e1c7      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fee:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4937      	ldr	r1, [pc, #220]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	e03a      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400c:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <HAL_RCC_OscConfig+0x244>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fe fa29 	bl	8002468 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401a:	f7fe fa25 	bl	8002468 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1a8      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4925      	ldr	r1, [pc, #148]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe fa08 	bl	8002468 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fe fa04 	bl	8002468 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e187      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d036      	beq.n	80040f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCC_OscConfig+0x248>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fe f9e8 	bl	8002468 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fe f9e4 	bl	8002468 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e167      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_OscConfig+0x240>)
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x200>
 80040ba:	e01b      	b.n	80040f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040bc:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCC_OscConfig+0x248>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c2:	f7fe f9d1 	bl	8002468 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	e00e      	b.n	80040e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fe f9cd 	bl	8002468 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d907      	bls.n	80040e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e150      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
 80040dc:	40023800 	.word	0x40023800
 80040e0:	42470000 	.word	0x42470000
 80040e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	4b88      	ldr	r3, [pc, #544]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ea      	bne.n	80040ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8097 	beq.w	8004230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004106:	4b81      	ldr	r3, [pc, #516]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	4b7d      	ldr	r3, [pc, #500]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	4a7c      	ldr	r2, [pc, #496]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	@ 0x40
 8004122:	4b7a      	ldr	r3, [pc, #488]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b77      	ldr	r3, [pc, #476]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413e:	4b74      	ldr	r3, [pc, #464]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a73      	ldr	r2, [pc, #460]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fe f98d 	bl	8002468 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fe f989 	bl	8002468 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e10c      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	4b6a      	ldr	r3, [pc, #424]	@ (8004310 <HAL_RCC_OscConfig+0x474>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x2ea>
 8004178:	4b64      	ldr	r3, [pc, #400]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a63      	ldr	r2, [pc, #396]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x324>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x30c>
 800418e:	4b5f      	ldr	r3, [pc, #380]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a5e      	ldr	r2, [pc, #376]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	4b5c      	ldr	r3, [pc, #368]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a5b      	ldr	r2, [pc, #364]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0x324>
 80041a8:	4b58      	ldr	r3, [pc, #352]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a57      	ldr	r2, [pc, #348]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	4b55      	ldr	r3, [pc, #340]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a54      	ldr	r2, [pc, #336]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041ba:	f023 0304 	bic.w	r3, r3, #4
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f94e 	bl	8002468 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe f94a 	bl	8002468 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0cb      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e6:	4b49      	ldr	r3, [pc, #292]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <HAL_RCC_OscConfig+0x334>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fe f938 	bl	8002468 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe f934 	bl	8002468 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0b5      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004212:	4b3e      	ldr	r3, [pc, #248]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ee      	bne.n	80041fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004224:	4b39      	ldr	r3, [pc, #228]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	4a38      	ldr	r2, [pc, #224]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a1 	beq.w	800437c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423a:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b08      	cmp	r3, #8
 8004244:	d05c      	beq.n	8004300 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d141      	bne.n	80042d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe f908 	bl	8002468 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe f904 	bl	8002468 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e087      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b27      	ldr	r3, [pc, #156]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	491b      	ldr	r1, [pc, #108]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fe f8dd 	bl	8002468 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fe f8d9 	bl	8002468 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e05c      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x416>
 80042d0:	e054      	b.n	800437c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_RCC_OscConfig+0x478>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fe f8c6 	bl	8002468 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fe f8c2 	bl	8002468 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e045      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <HAL_RCC_OscConfig+0x470>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x444>
 80042fe:	e03d      	b.n	800437c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e038      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000
 8004314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_RCC_OscConfig+0x4ec>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d028      	beq.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d121      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d11a      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800434e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004350:	4293      	cmp	r3, r2
 8004352:	d111      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0cc      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a0:	4b68      	ldr	r3, [pc, #416]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d90c      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b65      	ldr	r3, [pc, #404]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0b8      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e0:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a58      	ldr	r2, [pc, #352]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f8:	4b53      	ldr	r3, [pc, #332]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4a52      	ldr	r2, [pc, #328]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004404:	4b50      	ldr	r3, [pc, #320]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	494d      	ldr	r1, [pc, #308]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d044      	beq.n	80044ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d119      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d003      	beq.n	800444a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004446:	2b03      	cmp	r3, #3
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	4b3f      	ldr	r3, [pc, #252]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e06f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445a:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e067      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446a:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4934      	ldr	r1, [pc, #208]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800447c:	f7fd fff4 	bl	8002468 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004482:	e00a      	b.n	800449a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004484:	f7fd fff0 	bl	8002468 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e04f      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 020c 	and.w	r2, r3, #12
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d1eb      	bne.n	8004484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d20c      	bcs.n	80044d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b22      	ldr	r3, [pc, #136]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e032      	b.n	800453a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e0:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4916      	ldr	r1, [pc, #88]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004512:	f000 f889 	bl	8004628 <HAL_RCC_GetSysClockFreq>
 8004516:	4602      	mov	r2, r0
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	490a      	ldr	r1, [pc, #40]	@ (800454c <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	5ccb      	ldrb	r3, [r1, r3]
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd ff54 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00
 8004548:	40023800 	.word	0x40023800
 800454c:	08009b24 	.word	0x08009b24
 8004550:	20000000 	.word	0x20000000
 8004554:	20000004 	.word	0x20000004

08004558 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	@ 0x30
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d129      	bne.n	80045be <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	4a2a      	ldr	r2, [pc, #168]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6313      	str	r3, [r2, #48]	@ 0x30
 800457a:	4b28      	ldr	r3, [pc, #160]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800458a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458c:	2302      	movs	r3, #2
 800458e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004590:	2303      	movs	r3, #3
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	4619      	mov	r1, r3
 80045a2:	481f      	ldr	r0, [pc, #124]	@ (8004620 <HAL_RCC_MCOConfig+0xc8>)
 80045a4:	f7fe f8a2 	bl	80026ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80045a8:	4b1c      	ldr	r3, [pc, #112]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	4919      	ldr	r1, [pc, #100]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80045bc:	e029      	b.n	8004612 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	4b16      	ldr	r3, [pc, #88]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	4a15      	ldr	r2, [pc, #84]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ce:	4b13      	ldr	r3, [pc, #76]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80045da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e0:	2302      	movs	r3, #2
 80045e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80045f0:	f107 031c 	add.w	r3, r7, #28
 80045f4:	4619      	mov	r1, r3
 80045f6:	480b      	ldr	r0, [pc, #44]	@ (8004624 <HAL_RCC_MCOConfig+0xcc>)
 80045f8:	f7fe f878 	bl	80026ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	00d9      	lsls	r1, r3, #3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	430b      	orrs	r3, r1
 800460c:	4903      	ldr	r1, [pc, #12]	@ (800461c <HAL_RCC_MCOConfig+0xc4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
}
 8004612:	bf00      	nop
 8004614:	3730      	adds	r7, #48	@ 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	40020000 	.word	0x40020000
 8004624:	40020800 	.word	0x40020800

08004628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800462c:	b094      	sub	sp, #80	@ 0x50
 800462e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004640:	4b79      	ldr	r3, [pc, #484]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b08      	cmp	r3, #8
 800464a:	d00d      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x40>
 800464c:	2b08      	cmp	r3, #8
 800464e:	f200 80e1 	bhi.w	8004814 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x34>
 8004656:	2b04      	cmp	r3, #4
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x3a>
 800465a:	e0db      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800465c:	4b73      	ldr	r3, [pc, #460]	@ (800482c <HAL_RCC_GetSysClockFreq+0x204>)
 800465e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004660:	e0db      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004662:	4b73      	ldr	r3, [pc, #460]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x208>)
 8004664:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004666:	e0d8      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004668:	4b6f      	ldr	r3, [pc, #444]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004672:	4b6d      	ldr	r3, [pc, #436]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d063      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467e:	4b6a      	ldr	r3, [pc, #424]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	2200      	movs	r2, #0
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004688:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
 8004696:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	f04f 0000 	mov.w	r0, #0
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	0159      	lsls	r1, r3, #5
 80046a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ac:	0150      	lsls	r0, r2, #5
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4621      	mov	r1, r4
 80046b4:	1a51      	subs	r1, r2, r1
 80046b6:	6139      	str	r1, [r7, #16]
 80046b8:	4629      	mov	r1, r5
 80046ba:	eb63 0301 	sbc.w	r3, r3, r1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046cc:	4659      	mov	r1, fp
 80046ce:	018b      	lsls	r3, r1, #6
 80046d0:	4651      	mov	r1, sl
 80046d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d6:	4651      	mov	r1, sl
 80046d8:	018a      	lsls	r2, r1, #6
 80046da:	4651      	mov	r1, sl
 80046dc:	ebb2 0801 	subs.w	r8, r2, r1
 80046e0:	4659      	mov	r1, fp
 80046e2:	eb63 0901 	sbc.w	r9, r3, r1
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fa:	4690      	mov	r8, r2
 80046fc:	4699      	mov	r9, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	eb18 0303 	adds.w	r3, r8, r3
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	462b      	mov	r3, r5
 8004708:	eb49 0303 	adc.w	r3, r9, r3
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800471a:	4629      	mov	r1, r5
 800471c:	024b      	lsls	r3, r1, #9
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004724:	4621      	mov	r1, r4
 8004726:	024a      	lsls	r2, r1, #9
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472e:	2200      	movs	r2, #0
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004734:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004738:	f7fb fda2 	bl	8000280 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004744:	e058      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b38      	ldr	r3, [pc, #224]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	4618      	mov	r0, r3
 8004750:	4611      	mov	r1, r2
 8004752:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
 800475c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	0159      	lsls	r1, r3, #5
 800476e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004772:	0150      	lsls	r0, r2, #5
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4641      	mov	r1, r8
 800477a:	ebb2 0a01 	subs.w	sl, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb63 0b01 	sbc.w	fp, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004790:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004794:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004798:	ebb2 040a 	subs.w	r4, r2, sl
 800479c:	eb63 050b 	sbc.w	r5, r3, fp
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	00eb      	lsls	r3, r5, #3
 80047aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ae:	00e2      	lsls	r2, r4, #3
 80047b0:	4614      	mov	r4, r2
 80047b2:	461d      	mov	r5, r3
 80047b4:	4643      	mov	r3, r8
 80047b6:	18e3      	adds	r3, r4, r3
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	464b      	mov	r3, r9
 80047bc:	eb45 0303 	adc.w	r3, r5, r3
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ce:	4629      	mov	r1, r5
 80047d0:	028b      	lsls	r3, r1, #10
 80047d2:	4621      	mov	r1, r4
 80047d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d8:	4621      	mov	r1, r4
 80047da:	028a      	lsls	r2, r1, #10
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047e2:	2200      	movs	r2, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	61fa      	str	r2, [r7, #28]
 80047e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ec:	f7fb fd48 	bl	8000280 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	3301      	adds	r3, #1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004808:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800480a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetSysClockFreq+0x204>)
 8004816:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800481c:	4618      	mov	r0, r3
 800481e:	3750      	adds	r7, #80	@ 0x50
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	00f42400 	.word	0x00f42400
 8004830:	007a1200 	.word	0x007a1200

08004834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004838:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <HAL_RCC_GetHCLKFreq+0x14>)
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff0 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0a9b      	lsrs	r3, r3, #10
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08009b34 	.word	0x08009b34

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004878:	f7ff ffdc 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	08009b34 	.word	0x08009b34

0800489c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e042      	b.n	8004934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc f8da 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	@ 0x24
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f973 	bl	8004bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	d175      	bne.n	8004a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x2c>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e06e      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fd75 	bl	8002468 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b0:	e02e      	b.n	8004a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f848 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e03a      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1cb      	bne.n	80049b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	@ 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f814 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	e03b      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d037      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fd fcfc 	bl	8002468 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e03a      	b.n	8004afc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d023      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b80      	cmp	r3, #128	@ 0x80
 8004a98:	d020      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d01d      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d116      	bne.n	8004adc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f81d 	bl	8004b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2208      	movs	r2, #8
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e00f      	b.n	8004afc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d0b4      	beq.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b095      	sub	sp, #84	@ 0x54
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d119      	bne.n	8004bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9c:	61ba      	str	r2, [r7, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bbe:	bf00      	nop
 8004bc0:	3754      	adds	r7, #84	@ 0x54
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd0:	b0c0      	sub	sp, #256	@ 0x100
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	68d9      	ldr	r1, [r3, #12]
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	ea40 0301 	orr.w	r3, r0, r1
 8004bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c24:	f021 010c 	bic.w	r1, r1, #12
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c32:	430b      	orrs	r3, r1
 8004c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c46:	6999      	ldr	r1, [r3, #24]
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	ea40 0301 	orr.w	r3, r0, r1
 8004c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d005      	beq.n	8004c6c <UART_SetConfig+0xa0>
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b8d      	ldr	r3, [pc, #564]	@ (8004e9c <UART_SetConfig+0x2d0>)
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d104      	bne.n	8004c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c6c:	f7ff fe02 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8004c70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c74:	e003      	b.n	8004c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c76:	f7ff fde9 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8004c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c88:	f040 810c 	bne.w	8004ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	1891      	adds	r1, r2, r2
 8004ca4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ca6:	415b      	adcs	r3, r3
 8004ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cae:	4621      	mov	r1, r4
 8004cb0:	eb12 0801 	adds.w	r8, r2, r1
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	eb43 0901 	adc.w	r9, r3, r1
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cce:	4690      	mov	r8, r2
 8004cd0:	4699      	mov	r9, r3
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	eb18 0303 	adds.w	r3, r8, r3
 8004cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cdc:	462b      	mov	r3, r5
 8004cde:	eb49 0303 	adc.w	r3, r9, r3
 8004ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	18db      	adds	r3, r3, r3
 8004cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d00:	4613      	mov	r3, r2
 8004d02:	eb42 0303 	adc.w	r3, r2, r3
 8004d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d10:	f7fb fab6 	bl	8000280 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4b61      	ldr	r3, [pc, #388]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	011c      	lsls	r4, r3, #4
 8004d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	1891      	adds	r1, r2, r2
 8004d3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d3c:	415b      	adcs	r3, r3
 8004d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d44:	4641      	mov	r1, r8
 8004d46:	eb12 0a01 	adds.w	sl, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d64:	4692      	mov	sl, r2
 8004d66:	469b      	mov	fp, r3
 8004d68:	4643      	mov	r3, r8
 8004d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d72:	464b      	mov	r3, r9
 8004d74:	eb4b 0303 	adc.w	r3, fp, r3
 8004d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d90:	460b      	mov	r3, r1
 8004d92:	18db      	adds	r3, r3, r3
 8004d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d96:	4613      	mov	r3, r2
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004da6:	f7fb fa6b 	bl	8000280 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004db2:	fba3 2301 	umull	r2, r3, r3, r1
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2264      	movs	r2, #100	@ 0x64
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	1acb      	subs	r3, r1, r3
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dc6:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dd4:	441c      	add	r4, r3
 8004dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004de0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	1891      	adds	r1, r2, r2
 8004dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004df0:	415b      	adcs	r3, r3
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004df8:	4641      	mov	r1, r8
 8004dfa:	1851      	adds	r1, r2, r1
 8004dfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dfe:	4649      	mov	r1, r9
 8004e00:	414b      	adcs	r3, r1
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e10:	4659      	mov	r1, fp
 8004e12:	00cb      	lsls	r3, r1, #3
 8004e14:	4651      	mov	r1, sl
 8004e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	00ca      	lsls	r2, r1, #3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	4642      	mov	r2, r8
 8004e26:	189b      	adds	r3, r3, r2
 8004e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	460a      	mov	r2, r1
 8004e30:	eb42 0303 	adc.w	r3, r2, r3
 8004e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	18db      	adds	r3, r3, r3
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e52:	4613      	mov	r3, r2
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e62:	f7fb fa0d 	bl	8000280 <__aeabi_uldivmod>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	2164      	movs	r1, #100	@ 0x64
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	3332      	adds	r3, #50	@ 0x32
 8004e7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f003 0207 	and.w	r2, r3, #7
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4422      	add	r2, r4
 8004e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e94:	e106      	b.n	80050a4 <UART_SetConfig+0x4d8>
 8004e96:	bf00      	nop
 8004e98:	40011000 	.word	0x40011000
 8004e9c:	40011400 	.word	0x40011400
 8004ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	464b      	mov	r3, r9
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	6239      	str	r1, [r7, #32]
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	1854      	adds	r4, r2, r1
 8004eca:	4649      	mov	r1, r9
 8004ecc:	eb43 0501 	adc.w	r5, r3, r1
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	00eb      	lsls	r3, r5, #3
 8004eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ede:	00e2      	lsls	r2, r4, #3
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	18e3      	adds	r3, r4, r3
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004eec:	464b      	mov	r3, r9
 8004eee:	eb45 0303 	adc.w	r3, r5, r3
 8004ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f12:	4629      	mov	r1, r5
 8004f14:	008b      	lsls	r3, r1, #2
 8004f16:	4621      	mov	r1, r4
 8004f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	008a      	lsls	r2, r1, #2
 8004f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f24:	f7fb f9ac 	bl	8000280 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4b60      	ldr	r3, [pc, #384]	@ (80050b0 <UART_SetConfig+0x4e4>)
 8004f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	011c      	lsls	r4, r3, #4
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	61b9      	str	r1, [r7, #24]
 8004f50:	415b      	adcs	r3, r3
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f58:	4641      	mov	r1, r8
 8004f5a:	1851      	adds	r1, r2, r1
 8004f5c:	6139      	str	r1, [r7, #16]
 8004f5e:	4649      	mov	r1, r9
 8004f60:	414b      	adcs	r3, r1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f70:	4659      	mov	r1, fp
 8004f72:	00cb      	lsls	r3, r1, #3
 8004f74:	4651      	mov	r1, sl
 8004f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	00ca      	lsls	r2, r1, #3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	4642      	mov	r2, r8
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	460a      	mov	r2, r1
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	008b      	lsls	r3, r1, #2
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fba:	4641      	mov	r1, r8
 8004fbc:	008a      	lsls	r2, r1, #2
 8004fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fc2:	f7fb f95d 	bl	8000280 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4b38      	ldr	r3, [pc, #224]	@ (80050b0 <UART_SetConfig+0x4e4>)
 8004fce:	fba3 2301 	umull	r2, r3, r3, r1
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2264      	movs	r2, #100	@ 0x64
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	1acb      	subs	r3, r1, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	@ 0x32
 8004fe0:	4a33      	ldr	r2, [pc, #204]	@ (80050b0 <UART_SetConfig+0x4e4>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fec:	441c      	add	r4, r3
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ff6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	415b      	adcs	r3, r3
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6039      	str	r1, [r7, #0]
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800503e:	464b      	mov	r3, r9
 8005040:	460a      	mov	r2, r1
 8005042:	eb42 0303 	adc.w	r3, r2, r3
 8005046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	663b      	str	r3, [r7, #96]	@ 0x60
 8005052:	667a      	str	r2, [r7, #100]	@ 0x64
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005060:	4649      	mov	r1, r9
 8005062:	008b      	lsls	r3, r1, #2
 8005064:	4641      	mov	r1, r8
 8005066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506a:	4641      	mov	r1, r8
 800506c:	008a      	lsls	r2, r1, #2
 800506e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005072:	f7fb f905 	bl	8000280 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <UART_SetConfig+0x4e4>)
 800507c:	fba3 1302 	umull	r1, r3, r3, r2
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	2164      	movs	r1, #100	@ 0x64
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	3332      	adds	r3, #50	@ 0x32
 800508e:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <UART_SetConfig+0x4e4>)
 8005090:	fba2 2303 	umull	r2, r3, r2, r3
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4422      	add	r2, r4
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050aa:	46bd      	mov	sp, r7
 80050ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b0:	51eb851f 	.word	0x51eb851f

080050b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b4:	b084      	sub	sp, #16
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	f107 001c 	add.w	r0, r7, #28
 80050c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d123      	bne.n	8005116 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fae8 	bl	80066e0 <USB_CoreReset>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e01b      	b.n	800514e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fadc 	bl	80066e0 <USB_CoreReset>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800512c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005140:	e005      	b.n	800514e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800514e:	7fbb      	ldrb	r3, [r7, #30]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10b      	bne.n	800516c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f043 0206 	orr.w	r2, r3, #6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005178:	b004      	add	sp, #16
 800517a:	4770      	bx	lr

0800517c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d165      	bne.n	800525c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a41      	ldr	r2, [pc, #260]	@ (8005298 <USB_SetTurnaroundTime+0x11c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d906      	bls.n	80051a6 <USB_SetTurnaroundTime+0x2a>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a40      	ldr	r2, [pc, #256]	@ (800529c <USB_SetTurnaroundTime+0x120>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d202      	bcs.n	80051a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051a0:	230f      	movs	r3, #15
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e062      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a3c      	ldr	r2, [pc, #240]	@ (800529c <USB_SetTurnaroundTime+0x120>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d306      	bcc.n	80051bc <USB_SetTurnaroundTime+0x40>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a3b      	ldr	r2, [pc, #236]	@ (80052a0 <USB_SetTurnaroundTime+0x124>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d202      	bcs.n	80051bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051b6:	230e      	movs	r3, #14
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e057      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a38      	ldr	r2, [pc, #224]	@ (80052a0 <USB_SetTurnaroundTime+0x124>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d306      	bcc.n	80051d2 <USB_SetTurnaroundTime+0x56>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <USB_SetTurnaroundTime+0x128>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d202      	bcs.n	80051d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051cc:	230d      	movs	r3, #13
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e04c      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a33      	ldr	r2, [pc, #204]	@ (80052a4 <USB_SetTurnaroundTime+0x128>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d306      	bcc.n	80051e8 <USB_SetTurnaroundTime+0x6c>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a32      	ldr	r2, [pc, #200]	@ (80052a8 <USB_SetTurnaroundTime+0x12c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d802      	bhi.n	80051e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051e2:	230c      	movs	r3, #12
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e041      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <USB_SetTurnaroundTime+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d906      	bls.n	80051fe <USB_SetTurnaroundTime+0x82>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a2e      	ldr	r2, [pc, #184]	@ (80052ac <USB_SetTurnaroundTime+0x130>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d802      	bhi.n	80051fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051f8:	230b      	movs	r3, #11
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e036      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <USB_SetTurnaroundTime+0x130>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d906      	bls.n	8005214 <USB_SetTurnaroundTime+0x98>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a29      	ldr	r2, [pc, #164]	@ (80052b0 <USB_SetTurnaroundTime+0x134>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800520e:	230a      	movs	r3, #10
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e02b      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a26      	ldr	r2, [pc, #152]	@ (80052b0 <USB_SetTurnaroundTime+0x134>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d906      	bls.n	800522a <USB_SetTurnaroundTime+0xae>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <USB_SetTurnaroundTime+0x138>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d202      	bcs.n	800522a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005224:	2309      	movs	r3, #9
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e020      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a21      	ldr	r2, [pc, #132]	@ (80052b4 <USB_SetTurnaroundTime+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d306      	bcc.n	8005240 <USB_SetTurnaroundTime+0xc4>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <USB_SetTurnaroundTime+0x13c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d802      	bhi.n	8005240 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800523a:	2308      	movs	r3, #8
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e015      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <USB_SetTurnaroundTime+0x13c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d906      	bls.n	8005256 <USB_SetTurnaroundTime+0xda>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <USB_SetTurnaroundTime+0x140>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d202      	bcs.n	8005256 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005250:	2307      	movs	r3, #7
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e00a      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005256:	2306      	movs	r3, #6
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e007      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005262:	2309      	movs	r3, #9
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e001      	b.n	800526c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005268:	2309      	movs	r3, #9
 800526a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	00d8acbf 	.word	0x00d8acbf
 800529c:	00e4e1c0 	.word	0x00e4e1c0
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	01067380 	.word	0x01067380
 80052a8:	011a499f 	.word	0x011a499f
 80052ac:	01312cff 	.word	0x01312cff
 80052b0:	014ca43f 	.word	0x014ca43f
 80052b4:	016e3600 	.word	0x016e3600
 80052b8:	01a6ab1f 	.word	0x01a6ab1f
 80052bc:	01e84800 	.word	0x01e84800

080052c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d115      	bne.n	8005352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005332:	200a      	movs	r0, #10
 8005334:	f7fd f8a4 	bl	8002480 <HAL_Delay>
      ms += 10U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	330a      	adds	r3, #10
 800533c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f93f 	bl	80065c2 <USB_GetMode>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d01e      	beq.n	8005388 <USB_SetCurrentMode+0x84>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2bc7      	cmp	r3, #199	@ 0xc7
 800534e:	d9f0      	bls.n	8005332 <USB_SetCurrentMode+0x2e>
 8005350:	e01a      	b.n	8005388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d115      	bne.n	8005384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005364:	200a      	movs	r0, #10
 8005366:	f7fd f88b 	bl	8002480 <HAL_Delay>
      ms += 10U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	330a      	adds	r3, #10
 800536e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 f926 	bl	80065c2 <USB_GetMode>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <USB_SetCurrentMode+0x84>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005380:	d9f0      	bls.n	8005364 <USB_SetCurrentMode+0x60>
 8005382:	e001      	b.n	8005388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e005      	b.n	8005394 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2bc8      	cmp	r3, #200	@ 0xc8
 800538c:	d101      	bne.n	8005392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800539c:	b084      	sub	sp, #16
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e009      	b.n	80053d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3340      	adds	r3, #64	@ 0x40
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b0e      	cmp	r3, #14
 80053d4:	d9f2      	bls.n	80053bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d11c      	bne.n	8005418 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38
 8005416:	e00b      	b.n	8005430 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800543c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10d      	bne.n	8005460 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800544c:	2100      	movs	r1, #0
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f968 	bl	8005724 <USB_SetDevSpeed>
 8005454:	e008      	b.n	8005468 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005456:	2101      	movs	r1, #1
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f963 	bl	8005724 <USB_SetDevSpeed>
 800545e:	e003      	b.n	8005468 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005460:	2103      	movs	r1, #3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f95e 	bl	8005724 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005468:	2110      	movs	r1, #16
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8fa 	bl	8005664 <USB_FlushTxFifo>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f924 	bl	80056c8 <USB_FlushRxFifo>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a8:	461a      	mov	r2, r3
 80054aa:	2300      	movs	r3, #0
 80054ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e043      	b.n	800553c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ca:	d118      	bne.n	80054fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e013      	b.n	8005510 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e008      	b.n	8005510 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552e:	461a      	mov	r2, r3
 8005530:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3301      	adds	r3, #1
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005540:	461a      	mov	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4293      	cmp	r3, r2
 8005546:	d3b5      	bcc.n	80054b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e043      	b.n	80055d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005564:	d118      	bne.n	8005598 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	461a      	mov	r2, r3
 800557a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e013      	b.n	80055aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e008      	b.n	80055aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	3301      	adds	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055da:	461a      	mov	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4293      	cmp	r3, r2
 80055e0:	d3b5      	bcc.n	800554e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005602:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f043 0210 	orr.w	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <USB_DevInit+0x2c4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005624:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f043 0208 	orr.w	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005638:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005648:	f043 0304 	orr.w	r3, r3, #4
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565c:	b004      	add	sp, #16
 800565e:	4770      	bx	lr
 8005660:	803c3800 	.word	0x803c3800

08005664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567e:	d901      	bls.n	8005684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e01b      	b.n	80056bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	daf2      	bge.n	8005672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	019b      	lsls	r3, r3, #6
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a8:	d901      	bls.n	80056ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e006      	b.n	80056bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d0f0      	beq.n	800569c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e0:	d901      	bls.n	80056e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e018      	b.n	8005718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	daf2      	bge.n	80056d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2210      	movs	r2, #16
 80056f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005704:	d901      	bls.n	800570a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e006      	b.n	8005718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d0f0      	beq.n	80056f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]
 800577a:	e00a      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d002      	beq.n	8005788 <USB_GetDevSpeed+0x32>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b06      	cmp	r3, #6
 8005786:	d102      	bne.n	800578e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005788:	2302      	movs	r3, #2
 800578a:	75fb      	strb	r3, [r7, #23]
 800578c:	e001      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800578e:	230f      	movs	r3, #15
 8005790:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d13a      	bne.n	8005832 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057da:	4313      	orrs	r3, r2
 80057dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d155      	bne.n	80058a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005818:	4313      	orrs	r3, r2
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e036      	b.n	80058a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2101      	movs	r1, #1
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005850:	4313      	orrs	r3, r2
 8005852:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11a      	bne.n	80058a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005886:	430b      	orrs	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800589e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d161      	bne.n	8005990 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e2:	d11f      	bne.n	8005924 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800592a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	0159      	lsls	r1, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	440b      	add	r3, r1
 8005982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005986:	4619      	mov	r1, r3
 8005988:	4b35      	ldr	r3, [pc, #212]	@ (8005a60 <USB_DeactivateEndpoint+0x1b0>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	e060      	b.n	8005a52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a6:	d11f      	bne.n	80059e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	43db      	mvns	r3, r3
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a08:	4013      	ands	r3, r2
 8005a0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <USB_DeactivateEndpoint+0x1b4>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	ec337800 	.word	0xec337800
 8005a64:	eff37800 	.word	0xeff37800

08005a68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 817f 	bne.w	8005d88 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d132      	bne.n	8005af8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ab0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af0:	0cdb      	lsrs	r3, r3, #19
 8005af2:	04db      	lsls	r3, r3, #19
 8005af4:	6113      	str	r3, [r2, #16]
 8005af6:	e097      	b.n	8005c28 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b12:	0cdb      	lsrs	r3, r3, #19
 8005b14:	04db      	lsls	r3, r3, #19
 8005b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b3a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11a      	bne.n	8005b78 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d903      	bls.n	8005b56 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b74:	6113      	str	r3, [r2, #16]
 8005b76:	e044      	b.n	8005c02 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	1e5a      	subs	r2, r3, #1
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	04d9      	lsls	r1, r3, #19
 8005ba0:	4ba4      	ldr	r3, [pc, #656]	@ (8005e34 <USB_EPStartXfer+0x3cc>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	0148      	lsls	r0, r1, #5
 8005ba8:	69f9      	ldr	r1, [r7, #28]
 8005baa:	4401      	add	r1, r0
 8005bac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d122      	bne.n	8005c02 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005bda:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	8afb      	ldrh	r3, [r7, #22]
 8005bec:	075b      	lsls	r3, r3, #29
 8005bee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005bf2:	69b9      	ldr	r1, [r7, #24]
 8005bf4:	0148      	lsls	r0, r1, #5
 8005bf6:	69f9      	ldr	r1, [r7, #28]
 8005bf8:	4401      	add	r1, r0
 8005bfa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	0148      	lsls	r0, r1, #5
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	4401      	add	r1, r0
 8005c20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c24:	4313      	orrs	r3, r2
 8005c26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d14b      	bne.n	8005cc6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	791b      	ldrb	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d128      	bne.n	8005ca4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d110      	bne.n	8005c84 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e00f      	b.n	8005ca4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cbe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e166      	b.n	8005f94 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ce4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	791b      	ldrb	r3, [r3, #4]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d015      	beq.n	8005d1a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 814e 	beq.w	8005f94 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	2101      	movs	r1, #1
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	69f9      	ldr	r1, [r7, #28]
 8005d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d14:	4313      	orrs	r3, r2
 8005d16:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d18:	e13c      	b.n	8005f94 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d110      	bne.n	8005d4c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00f      	b.n	8005d6c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d6a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781a      	ldrb	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	b298      	uxth	r0, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4603      	mov	r3, r0
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f9b9 	bl	80060f8 <USB_WritePacket>
 8005d86:	e105      	b.n	8005f94 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da2:	0cdb      	lsrs	r3, r3, #19
 8005da4:	04db      	lsls	r3, r3, #19
 8005da6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d132      	bne.n	8005e38 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e2e:	6113      	str	r3, [r2, #16]
 8005e30:	e062      	b.n	8005ef8 <USB_EPStartXfer+0x490>
 8005e32:	bf00      	nop
 8005e34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d123      	bne.n	8005e88 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e56:	69b9      	ldr	r1, [r7, #24]
 8005e58:	0148      	lsls	r0, r1, #5
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	4401      	add	r1, r0
 8005e5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e84:	6113      	str	r3, [r2, #16]
 8005e86:	e037      	b.n	8005ef8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	1e5a      	subs	r2, r3, #1
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	8afa      	ldrh	r2, [r7, #22]
 8005ea4:	fb03 f202 	mul.w	r2, r3, r2
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	8afb      	ldrh	r3, [r7, #22]
 8005ebc:	04d9      	lsls	r1, r3, #19
 8005ebe:	4b38      	ldr	r3, [pc, #224]	@ (8005fa0 <USB_EPStartXfer+0x538>)
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	69b9      	ldr	r1, [r7, #24]
 8005ec4:	0148      	lsls	r0, r1, #5
 8005ec6:	69f9      	ldr	r1, [r7, #28]
 8005ec8:	4401      	add	r1, r0
 8005eca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	0148      	lsls	r0, r1, #5
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	4401      	add	r1, r0
 8005ef0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10d      	bne.n	8005f1a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68d9      	ldr	r1, [r3, #12]
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	460a      	mov	r2, r1
 8005f18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	791b      	ldrb	r3, [r3, #4]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d128      	bne.n	8005f74 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d110      	bne.n	8005f54 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e00f      	b.n	8005f74 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	1ff80000 	.word	0x1ff80000

08005fa4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d14a      	bne.n	8006058 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fda:	f040 8086 	bne.w	80060ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ffc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006000:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006032:	4293      	cmp	r3, r2
 8006034:	d902      	bls.n	800603c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
          break;
 800603a:	e056      	b.n	80060ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006054:	d0e7      	beq.n	8006026 <USB_EPStopXfer+0x82>
 8006056:	e048      	b.n	80060ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800606c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006070:	d13b      	bne.n	80060ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006090:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006094:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d902      	bls.n	80060d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
          break;
 80060ce:	e00c      	b.n	80060ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e8:	d0e7      	beq.n	80060ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b089      	sub	sp, #36	@ 0x24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4611      	mov	r1, r2
 8006104:	461a      	mov	r2, r3
 8006106:	460b      	mov	r3, r1
 8006108:	71fb      	strb	r3, [r7, #7]
 800610a:	4613      	mov	r3, r2
 800610c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006116:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d123      	bne.n	8006166 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800611e:	88bb      	ldrh	r3, [r7, #4]
 8006120:	3303      	adds	r3, #3
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e018      	b.n	800615e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	031a      	lsls	r2, r3, #12
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006138:	461a      	mov	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3301      	adds	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3301      	adds	r3, #1
 8006156:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	3301      	adds	r3, #1
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	429a      	cmp	r2, r3
 8006164:	d3e2      	bcc.n	800612c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3724      	adds	r7, #36	@ 0x24
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006174:	b480      	push	{r7}
 8006176:	b08b      	sub	sp, #44	@ 0x2c
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	089b      	lsrs	r3, r3, #2
 800618e:	b29b      	uxth	r3, r3
 8006190:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	e014      	b.n	80061ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	3301      	adds	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	3301      	adds	r3, #1
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	3301      	adds	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	3301      	adds	r3, #1
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	3301      	adds	r3, #1
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3e6      	bcc.n	80061a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061d2:	8bfb      	ldrh	r3, [r7, #30]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01e      	beq.n	8006216 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e2:	461a      	mov	r2, r3
 80061e4:	f107 0310 	add.w	r3, r7, #16
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	701a      	strb	r2, [r3, #0]
      i++;
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	3301      	adds	r3, #1
 8006202:	623b      	str	r3, [r7, #32]
      pDest++;
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	3301      	adds	r3, #1
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800620a:	8bfb      	ldrh	r3, [r7, #30]
 800620c:	3b01      	subs	r3, #1
 800620e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006210:	8bfb      	ldrh	r3, [r7, #30]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ea      	bne.n	80061ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006218:	4618      	mov	r0, r3
 800621a:	372c      	adds	r7, #44	@ 0x2c
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d12c      	bne.n	800629a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	db12      	blt.n	8006278 <USB_EPSetStall+0x54>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006272:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006276:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006292:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e02b      	b.n	80062f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	db12      	blt.n	80062d2 <USB_EPSetStall+0xae>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00f      	beq.n	80062d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d128      	bne.n	800636e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800633a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d003      	beq.n	800634c <USB_EPClearStall+0x4c>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d138      	bne.n	80063be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e027      	b.n	80063be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006388:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800638c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	791b      	ldrb	r3, [r3, #4]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d003      	beq.n	800639e <USB_EPClearStall+0x9e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	791b      	ldrb	r3, [r3, #4]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d10f      	bne.n	80063be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80063ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006406:	4313      	orrs	r3, r2
 8006408:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006446:	f023 0302 	bic.w	r3, r3, #2
 800644a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006488:	f043 0302 	orr.w	r3, r3, #2
 800648c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064b4:	68fb      	ldr	r3, [r7, #12]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4013      	ands	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	0c1b      	lsrs	r3, r3, #16
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	b29b      	uxth	r3, r3
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4013      	ands	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006558:	68bb      	ldr	r3, [r7, #8]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006566:	b480      	push	{r7}
 8006568:	b087      	sub	sp, #28
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	b2db      	uxtb	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b4:	68bb      	ldr	r3, [r7, #8]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0301 	and.w	r3, r3, #1
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065fc:	f023 0307 	bic.w	r3, r3, #7
 8006600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	460b      	mov	r3, r1
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	333c      	adds	r3, #60	@ 0x3c
 800663a:	3304      	adds	r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4a26      	ldr	r2, [pc, #152]	@ (80066dc <USB_EP0_OutStart+0xb8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d90a      	bls.n	800665e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006658:	d101      	bne.n	800665e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e037      	b.n	80066ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006678:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800667c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800668c:	f043 0318 	orr.w	r3, r3, #24
 8006690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80066a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d10f      	bne.n	80066cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80066ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	4f54300a 	.word	0x4f54300a

080066e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f8:	d901      	bls.n	80066fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e01b      	b.n	8006736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	daf2      	bge.n	80066ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006722:	d901      	bls.n	8006728 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e006      	b.n	8006736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d0f0      	beq.n	8006716 <USB_CoreReset+0x36>

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006750:	2010      	movs	r0, #16
 8006752:	f002 f8fb 	bl	800894c <USBD_static_malloc>
 8006756:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32b0      	adds	r2, #176	@ 0xb0
 8006768:	2100      	movs	r1, #0
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800676e:	2302      	movs	r3, #2
 8006770:	e048      	b.n	8006804 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	32b0      	adds	r2, #176	@ 0xb0
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	32b0      	adds	r2, #176	@ 0xb0
 800678c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7c1b      	ldrb	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800679e:	4b1b      	ldr	r3, [pc, #108]	@ (800680c <USBD_HID_Init+0xc8>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 020f 	and.w	r2, r3, #15
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	3326      	adds	r3, #38	@ 0x26
 80067b4:	2207      	movs	r2, #7
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e00c      	b.n	80067d4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80067ba:	4b14      	ldr	r3, [pc, #80]	@ (800680c <USBD_HID_Init+0xc8>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	3326      	adds	r3, #38	@ 0x26
 80067d0:	220a      	movs	r2, #10
 80067d2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80067d4:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <USBD_HID_Init+0xc8>)
 80067d6:	7819      	ldrb	r1, [r3, #0]
 80067d8:	2304      	movs	r3, #4
 80067da:	2203      	movs	r2, #3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 ffa4 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <USBD_HID_Init+0xc8>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3324      	adds	r3, #36	@ 0x24
 80067f8:	2201      	movs	r2, #1
 80067fa:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200000ca 	.word	0x200000ca

08006810 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800681c:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <USBD_HID_DeInit+0x8c>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 ffa7 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006828:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <USBD_HID_DeInit+0x8c>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	3324      	adds	r3, #36	@ 0x24
 800683e:	2200      	movs	r2, #0
 8006840:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006842:	4b16      	ldr	r3, [pc, #88]	@ (800689c <USBD_HID_DeInit+0x8c>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3326      	adds	r3, #38	@ 0x26
 8006858:	2200      	movs	r2, #0
 800685a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	32b0      	adds	r2, #176	@ 0xb0
 8006866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32b0      	adds	r2, #176	@ 0xb0
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	4618      	mov	r0, r3
 800687e:	f002 f873 	bl	8008968 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32b0      	adds	r2, #176	@ 0xb0
 800688c:	2100      	movs	r1, #0
 800688e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200000ca 	.word	0x200000ca

080068a0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32b0      	adds	r2, #176	@ 0xb0
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0e8      	b.n	8006a9e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d046      	beq.n	8006966 <USBD_HID_Setup+0xc6>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f040 80d8 	bne.w	8006a8e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	3b02      	subs	r3, #2
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	d836      	bhi.n	8006956 <USBD_HID_Setup+0xb6>
 80068e8:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <USBD_HID_Setup+0x50>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006947 	.word	0x08006947
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006957 	.word	0x08006957
 80068fc:	08006957 	.word	0x08006957
 8006900:	08006957 	.word	0x08006957
 8006904:	08006957 	.word	0x08006957
 8006908:	08006957 	.word	0x08006957
 800690c:	08006957 	.word	0x08006957
 8006910:	08006935 	.word	0x08006935
 8006914:	08006919 	.word	0x08006919
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	885b      	ldrh	r3, [r3, #2]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]
          break;
 8006924:	e01e      	b.n	8006964 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fbb5 	bl	800809c <USBD_CtlSendData>
          break;
 8006932:	e017      	b.n	8006964 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	885b      	ldrh	r3, [r3, #2]
 8006938:	0a1b      	lsrs	r3, r3, #8
 800693a:	b29b      	uxth	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	605a      	str	r2, [r3, #4]
          break;
 8006944:	e00e      	b.n	8006964 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	2201      	movs	r2, #1
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fba4 	bl	800809c <USBD_CtlSendData>
          break;
 8006954:	e006      	b.n	8006964 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fb22 	bl	8007fa2 <USBD_CtlError>
          ret = USBD_FAIL;
 800695e:	2303      	movs	r3, #3
 8006960:	75fb      	strb	r3, [r7, #23]
          break;
 8006962:	bf00      	nop
      }
      break;
 8006964:	e09a      	b.n	8006a9c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	2b0b      	cmp	r3, #11
 800696c:	f200 8086 	bhi.w	8006a7c <USBD_HID_Setup+0x1dc>
 8006970:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <USBD_HID_Setup+0xd8>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	080069a9 	.word	0x080069a9
 800697c:	08006a8b 	.word	0x08006a8b
 8006980:	08006a7d 	.word	0x08006a7d
 8006984:	08006a7d 	.word	0x08006a7d
 8006988:	08006a7d 	.word	0x08006a7d
 800698c:	08006a7d 	.word	0x08006a7d
 8006990:	080069d3 	.word	0x080069d3
 8006994:	08006a7d 	.word	0x08006a7d
 8006998:	08006a7d 	.word	0x08006a7d
 800699c:	08006a7d 	.word	0x08006a7d
 80069a0:	08006a2b 	.word	0x08006a2b
 80069a4:	08006a55 	.word	0x08006a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d107      	bne.n	80069c4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069b4:	f107 030a 	add.w	r3, r7, #10
 80069b8:	2202      	movs	r2, #2
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fb6d 	bl	800809c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c2:	e063      	b.n	8006a8c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 faeb 	bl	8007fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	75fb      	strb	r3, [r7, #23]
          break;
 80069d0:	e05c      	b.n	8006a8c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	885b      	ldrh	r3, [r3, #2]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b22      	cmp	r3, #34	@ 0x22
 80069dc:	d108      	bne.n	80069f0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	2b4a      	cmp	r3, #74	@ 0x4a
 80069e4:	bf28      	it	cs
 80069e6:	234a      	movcs	r3, #74	@ 0x4a
 80069e8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80069ea:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa8 <USBD_HID_Setup+0x208>)
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e015      	b.n	8006a1c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	885b      	ldrh	r3, [r3, #2]
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b21      	cmp	r3, #33	@ 0x21
 80069fa:	d108      	bne.n	8006a0e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80069fc:	4b2b      	ldr	r3, [pc, #172]	@ (8006aac <USBD_HID_Setup+0x20c>)
 80069fe:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	88db      	ldrh	r3, [r3, #6]
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	bf28      	it	cs
 8006a08:	2309      	movcs	r3, #9
 8006a0a:	82bb      	strh	r3, [r7, #20]
 8006a0c:	e006      	b.n	8006a1c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fac6 	bl	8007fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a16:	2303      	movs	r3, #3
 8006a18:	75fb      	strb	r3, [r7, #23]
            break;
 8006a1a:	e037      	b.n	8006a8c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a1c:	8abb      	ldrh	r3, [r7, #20]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6939      	ldr	r1, [r7, #16]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fb3a 	bl	800809c <USBD_CtlSendData>
          break;
 8006a28:	e030      	b.n	8006a8c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d107      	bne.n	8006a46 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fb2c 	bl	800809c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a44:	e022      	b.n	8006a8c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 faaa 	bl	8007fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	75fb      	strb	r3, [r7, #23]
          break;
 8006a52:	e01b      	b.n	8006a8c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d106      	bne.n	8006a6e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	885b      	ldrh	r3, [r3, #2]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6c:	e00e      	b.n	8006a8c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fa96 	bl	8007fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7a:	e007      	b.n	8006a8c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fa8f 	bl	8007fa2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a84:	2303      	movs	r3, #3
 8006a86:	75fb      	strb	r3, [r7, #23]
          break;
 8006a88:	e000      	b.n	8006a8c <USBD_HID_Setup+0x1ec>
          break;
 8006a8a:	bf00      	nop
      }
      break;
 8006a8c:	e006      	b.n	8006a9c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fa86 	bl	8007fa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a96:	2303      	movs	r3, #3
 8006a98:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000080 	.word	0x20000080
 8006aac:	20000068 	.word	0x20000068

08006ab0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006ab8:	2181      	movs	r1, #129	@ 0x81
 8006aba:	4809      	ldr	r0, [pc, #36]	@ (8006ae0 <USBD_HID_GetFSCfgDesc+0x30>)
 8006abc:	f000 fc3b 	bl	8007336 <USBD_GetEpDesc>
 8006ac0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	220a      	movs	r2, #10
 8006acc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2222      	movs	r2, #34	@ 0x22
 8006ad2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000044 	.word	0x20000044

08006ae4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006aec:	2181      	movs	r1, #129	@ 0x81
 8006aee:	4809      	ldr	r0, [pc, #36]	@ (8006b14 <USBD_HID_GetHSCfgDesc+0x30>)
 8006af0:	f000 fc21 	bl	8007336 <USBD_GetEpDesc>
 8006af4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2207      	movs	r2, #7
 8006b00:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2222      	movs	r2, #34	@ 0x22
 8006b06:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b08:	4b02      	ldr	r3, [pc, #8]	@ (8006b14 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000044 	.word	0x20000044

08006b18 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b20:	2181      	movs	r1, #129	@ 0x81
 8006b22:	4809      	ldr	r0, [pc, #36]	@ (8006b48 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006b24:	f000 fc07 	bl	8007336 <USBD_GetEpDesc>
 8006b28:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	220a      	movs	r2, #10
 8006b34:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2222      	movs	r2, #34	@ 0x22
 8006b3a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b3c:	4b02      	ldr	r3, [pc, #8]	@ (8006b48 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000044 	.word	0x20000044

08006b4c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	@ 0xb0
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	2200      	movs	r2, #0
 8006b68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	220a      	movs	r2, #10
 8006b84:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	@ (8006b94 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000074 	.word	0x20000074

08006b98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e01f      	b.n	8006bf0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f001 fd39 	bl	800865c <USBD_LL_Init>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e025      	b.n	8006c5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	@ 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	@ 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f107 020e 	add.w	r2, r7, #14
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fd41 	bl	80086f4 <USBD_LL_Start>
 8006c72:	4603      	mov	r3, r0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 f90c 	bl	8007f2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d01a      	beq.n	8006d70 <USBD_LL_SetupStage+0x72>
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d822      	bhi.n	8006d84 <USBD_LL_SetupStage+0x86>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <USBD_LL_SetupStage+0x4a>
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d00a      	beq.n	8006d5c <USBD_LL_SetupStage+0x5e>
 8006d46:	e01d      	b.n	8006d84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb63 	bl	800741c <USBD_StdDevReq>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5a:	e020      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fbcb 	bl	8007500 <USBD_StdItfReq>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6e:	e016      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc2d 	bl	80075d8 <USBD_StdEPReq>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
      break;
 8006d82:	e00c      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 fd0e 	bl	80087b4 <USBD_LL_StallEP>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9c:	bf00      	nop
  }

  return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	460b      	mov	r3, r1
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d16e      	bne.n	8006e9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006dc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	f040 8098 	bne.w	8006f04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d913      	bls.n	8006e08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	bf28      	it	cs
 8006dfa:	4613      	movcs	r3, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f001 f977 	bl	80080f4 <USBD_CtlContinueRx>
 8006e06:	e07d      	b.n	8006f04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d014      	beq.n	8006e40 <USBD_LL_DataOutStage+0x98>
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d81d      	bhi.n	8006e56 <USBD_LL_DataOutStage+0xae>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <USBD_LL_DataOutStage+0x7c>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d003      	beq.n	8006e2a <USBD_LL_DataOutStage+0x82>
 8006e22:	e018      	b.n	8006e56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75bb      	strb	r3, [r7, #22]
            break;
 8006e28:	e018      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa64 	bl	8007302 <USBD_CoreFindIF>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e3e:	e00d      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa66 	bl	800731c <USBD_CoreFindEP>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75bb      	strb	r3, [r7, #22]
            break;
 8006e54:	e002      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75bb      	strb	r3, [r7, #22]
            break;
 8006e5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d119      	bne.n	8006e96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d113      	bne.n	8006e96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e6e:	7dba      	ldrb	r2, [r7, #22]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	32ae      	adds	r2, #174	@ 0xae
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e7e:	7dba      	ldrb	r2, [r7, #22]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e86:	7dba      	ldrb	r2, [r7, #22]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	32ae      	adds	r2, #174	@ 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f001 f93d 	bl	8008116 <USBD_CtlSendStatus>
 8006e9c:	e032      	b.n	8006f04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fa37 	bl	800731c <USBD_CoreFindEP>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eb2:	7dbb      	ldrb	r3, [r7, #22]
 8006eb4:	2bff      	cmp	r3, #255	@ 0xff
 8006eb6:	d025      	beq.n	8006f04 <USBD_LL_DataOutStage+0x15c>
 8006eb8:	7dbb      	ldrb	r3, [r7, #22]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d122      	bne.n	8006f04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d117      	bne.n	8006efa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006eca:	7dba      	ldrb	r2, [r7, #22]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	32ae      	adds	r2, #174	@ 0xae
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00f      	beq.n	8006efa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ee2:	7dba      	ldrb	r2, [r7, #22]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	32ae      	adds	r2, #174	@ 0xae
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	7afa      	ldrb	r2, [r7, #11]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	e000      	b.n	8006f06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	460b      	mov	r3, r1
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d16f      	bne.n	8007002 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3314      	adds	r3, #20
 8006f26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d15a      	bne.n	8006fe8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d914      	bls.n	8006f68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 f8bc 	bl	80080d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f001 fcd1 	bl	8008908 <USBD_LL_PrepareReceive>
 8006f66:	e03f      	b.n	8006fe8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d11c      	bne.n	8006fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d316      	bcc.n	8006fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20f      	bcs.n	8006fae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 f89d 	bl	80080d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 fcae 	bl	8008908 <USBD_LL_PrepareReceive>
 8006fac:	e01c      	b.n	8006fe8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d10f      	bne.n	8006fda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 fbe9 	bl	80087b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f001 f8aa 	bl	800813c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d03a      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fe42 	bl	8006c7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007000:	e032      	b.n	8007068 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f985 	bl	800731c <USBD_CoreFindEP>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2bff      	cmp	r3, #255	@ 0xff
 800701a:	d025      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d122      	bne.n	8007068 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b03      	cmp	r3, #3
 800702c:	d11c      	bne.n	8007068 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800702e:	7dfa      	ldrb	r2, [r7, #23]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	32ae      	adds	r2, #174	@ 0xae
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d014      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800703e:	7dfa      	ldrb	r2, [r7, #23]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007046:	7dfa      	ldrb	r2, [r7, #23]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	32ae      	adds	r2, #174	@ 0xae
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	7afa      	ldrb	r2, [r7, #11]
 8007054:	4611      	mov	r1, r2
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	4798      	blx	r3
 800705a:	4603      	mov	r3, r0
 800705c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800705e:	7dbb      	ldrb	r3, [r7, #22]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007064:	7dbb      	ldrb	r3, [r7, #22]
 8007066:	e000      	b.n	800706a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d014      	beq.n	80070d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6852      	ldr	r2, [r2, #4]
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	4611      	mov	r1, r2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d8:	2340      	movs	r3, #64	@ 0x40
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fb23 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2240      	movs	r2, #64	@ 0x40
 80070f0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070f4:	2340      	movs	r3, #64	@ 0x40
 80070f6:	2200      	movs	r2, #0
 80070f8:	2180      	movs	r1, #128	@ 0x80
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fb15 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2240      	movs	r2, #64	@ 0x40
 800710a:	621a      	str	r2, [r3, #32]

  return ret;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b04      	cmp	r3, #4
 8007148:	d006      	beq.n	8007158 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007150:	b2da      	uxtb	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b04      	cmp	r3, #4
 8007180:	d106      	bne.n	8007190 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007188:	b2da      	uxtb	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d110      	bne.n	80071d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	32ae      	adds	r2, #174	@ 0xae
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e01c      	b.n	800723a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d115      	bne.n	8007238 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	@ 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	32ae      	adds	r2, #174	@ 0xae
 800722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	4611      	mov	r1, r2
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	32ae      	adds	r2, #174	@ 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e01c      	b.n	800729e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d115      	bne.n	800729c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32ae      	adds	r2, #174	@ 0xae
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32ae      	adds	r2, #174	@ 0xae
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6852      	ldr	r2, [r2, #4]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800730e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	b29b      	uxth	r3, r3
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	4293      	cmp	r3, r2
 800735a:	d91f      	bls.n	800739c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007362:	e013      	b.n	800738c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007364:	f107 030a 	add.w	r3, r7, #10
 8007368:	4619      	mov	r1, r3
 800736a:	6978      	ldr	r0, [r7, #20]
 800736c:	f000 f81b 	bl	80073a6 <USBD_GetNextDesc>
 8007370:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b05      	cmp	r3, #5
 8007378:	d108      	bne.n	800738c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	789b      	ldrb	r3, [r3, #2]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	429a      	cmp	r2, r3
 8007386:	d008      	beq.n	800739a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	b29a      	uxth	r2, r3
 8007392:	897b      	ldrh	r3, [r7, #10]
 8007394:	429a      	cmp	r2, r3
 8007396:	d8e5      	bhi.n	8007364 <USBD_GetEpDesc+0x2e>
 8007398:	e000      	b.n	800739c <USBD_GetEpDesc+0x66>
          break;
 800739a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800739c:	693b      	ldr	r3, [r7, #16]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	4413      	add	r3, r2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3301      	adds	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073fc:	8a3b      	ldrh	r3, [r7, #16]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	b21a      	sxth	r2, r3
 8007402:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007406:	4313      	orrs	r3, r2
 8007408:	b21b      	sxth	r3, r3
 800740a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800740c:	89fb      	ldrh	r3, [r7, #14]
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007432:	2b40      	cmp	r3, #64	@ 0x40
 8007434:	d005      	beq.n	8007442 <USBD_StdDevReq+0x26>
 8007436:	2b40      	cmp	r3, #64	@ 0x40
 8007438:	d857      	bhi.n	80074ea <USBD_StdDevReq+0xce>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <USBD_StdDevReq+0x42>
 800743e:	2b20      	cmp	r3, #32
 8007440:	d153      	bne.n	80074ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32ae      	adds	r2, #174	@ 0xae
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e04a      	b.n	80074f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b09      	cmp	r3, #9
 8007464:	d83b      	bhi.n	80074de <USBD_StdDevReq+0xc2>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <USBD_StdDevReq+0x50>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	080074c1 	.word	0x080074c1
 8007470:	080074d5 	.word	0x080074d5
 8007474:	080074df 	.word	0x080074df
 8007478:	080074cb 	.word	0x080074cb
 800747c:	080074df 	.word	0x080074df
 8007480:	0800749f 	.word	0x0800749f
 8007484:	08007495 	.word	0x08007495
 8007488:	080074df 	.word	0x080074df
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074a9 	.word	0x080074a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa3c 	bl	8007914 <USBD_GetDescriptor>
          break;
 800749c:	e024      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fba1 	bl	8007be8 <USBD_SetAddress>
          break;
 80074a6:	e01f      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fbe0 	bl	8007c70 <USBD_SetConfig>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
          break;
 80074b4:	e018      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc83 	bl	8007dc4 <USBD_GetConfig>
          break;
 80074be:	e013      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fcb4 	bl	8007e30 <USBD_GetStatus>
          break;
 80074c8:	e00e      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fce3 	bl	8007e98 <USBD_SetFeature>
          break;
 80074d2:	e009      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fd07 	bl	8007eea <USBD_ClrFeature>
          break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fd5e 	bl	8007fa2 <USBD_CtlError>
          break;
 80074e6:	bf00      	nop
      }
      break;
 80074e8:	e004      	b.n	80074f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fd58 	bl	8007fa2 <USBD_CtlError>
      break;
 80074f2:	bf00      	nop
  }

  return ret;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop

08007500 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d005      	beq.n	8007526 <USBD_StdItfReq+0x26>
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d852      	bhi.n	80075c4 <USBD_StdItfReq+0xc4>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <USBD_StdItfReq+0x26>
 8007522:	2b20      	cmp	r3, #32
 8007524:	d14e      	bne.n	80075c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	2b02      	cmp	r3, #2
 8007532:	d840      	bhi.n	80075b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	889b      	ldrh	r3, [r3, #4]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b01      	cmp	r3, #1
 800753c:	d836      	bhi.n	80075ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	889b      	ldrh	r3, [r3, #4]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fedb 	bl	8007302 <USBD_CoreFindIF>
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2bff      	cmp	r3, #255	@ 0xff
 8007554:	d01d      	beq.n	8007592 <USBD_StdItfReq+0x92>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d11a      	bne.n	8007592 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800755c:	7bba      	ldrb	r2, [r7, #14]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32ae      	adds	r2, #174	@ 0xae
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800756c:	7bba      	ldrb	r2, [r7, #14]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007574:	7bba      	ldrb	r2, [r7, #14]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	@ 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800758a:	e004      	b.n	8007596 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800758c:	2303      	movs	r3, #3
 800758e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007590:	e001      	b.n	8007596 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d110      	bne.n	80075c0 <USBD_StdItfReq+0xc0>
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fdb6 	bl	8008116 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075aa:	e009      	b.n	80075c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fcf7 	bl	8007fa2 <USBD_CtlError>
          break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fcf2 	bl	8007fa2 <USBD_CtlError>
          break;
 80075be:	e000      	b.n	80075c2 <USBD_StdItfReq+0xc2>
          break;
 80075c0:	bf00      	nop
      }
      break;
 80075c2:	e004      	b.n	80075ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fceb 	bl	8007fa2 <USBD_CtlError>
      break;
 80075cc:	bf00      	nop
  }

  return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f4:	2b40      	cmp	r3, #64	@ 0x40
 80075f6:	d007      	beq.n	8007608 <USBD_StdEPReq+0x30>
 80075f8:	2b40      	cmp	r3, #64	@ 0x40
 80075fa:	f200 817f 	bhi.w	80078fc <USBD_StdEPReq+0x324>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02a      	beq.n	8007658 <USBD_StdEPReq+0x80>
 8007602:	2b20      	cmp	r3, #32
 8007604:	f040 817a 	bne.w	80078fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fe85 	bl	800731c <USBD_CoreFindEP>
 8007612:	4603      	mov	r3, r0
 8007614:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007616:	7b7b      	ldrb	r3, [r7, #13]
 8007618:	2bff      	cmp	r3, #255	@ 0xff
 800761a:	f000 8174 	beq.w	8007906 <USBD_StdEPReq+0x32e>
 800761e:	7b7b      	ldrb	r3, [r7, #13]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 8170 	bne.w	8007906 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007626:	7b7a      	ldrb	r2, [r7, #13]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800762e:	7b7a      	ldrb	r2, [r7, #13]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	32ae      	adds	r2, #174	@ 0xae
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8163 	beq.w	8007906 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007640:	7b7a      	ldrb	r2, [r7, #13]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32ae      	adds	r2, #174	@ 0xae
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007656:	e156      	b.n	8007906 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b03      	cmp	r3, #3
 800765e:	d008      	beq.n	8007672 <USBD_StdEPReq+0x9a>
 8007660:	2b03      	cmp	r3, #3
 8007662:	f300 8145 	bgt.w	80078f0 <USBD_StdEPReq+0x318>
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 809b 	beq.w	80077a2 <USBD_StdEPReq+0x1ca>
 800766c:	2b01      	cmp	r3, #1
 800766e:	d03c      	beq.n	80076ea <USBD_StdEPReq+0x112>
 8007670:	e13e      	b.n	80078f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d002      	beq.n	8007684 <USBD_StdEPReq+0xac>
 800767e:	2b03      	cmp	r3, #3
 8007680:	d016      	beq.n	80076b0 <USBD_StdEPReq+0xd8>
 8007682:	e02c      	b.n	80076de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <USBD_StdEPReq+0xce>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b80      	cmp	r3, #128	@ 0x80
 800768e:	d00a      	beq.n	80076a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f88d 	bl	80087b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800769a:	2180      	movs	r1, #128	@ 0x80
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f889 	bl	80087b4 <USBD_LL_StallEP>
 80076a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076a4:	e020      	b.n	80076e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fc7a 	bl	8007fa2 <USBD_CtlError>
              break;
 80076ae:	e01b      	b.n	80076e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10e      	bne.n	80076d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <USBD_StdEPReq+0xfe>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b80      	cmp	r3, #128	@ 0x80
 80076c2:	d008      	beq.n	80076d6 <USBD_StdEPReq+0xfe>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f86f 	bl	80087b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fd1d 	bl	8008116 <USBD_CtlSendStatus>

              break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc5e 	bl	8007fa2 <USBD_CtlError>
              break;
 80076e6:	bf00      	nop
          }
          break;
 80076e8:	e107      	b.n	80078fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d002      	beq.n	80076fc <USBD_StdEPReq+0x124>
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d016      	beq.n	8007728 <USBD_StdEPReq+0x150>
 80076fa:	e04b      	b.n	8007794 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <USBD_StdEPReq+0x146>
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b80      	cmp	r3, #128	@ 0x80
 8007706:	d00a      	beq.n	800771e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f851 	bl	80087b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007712:	2180      	movs	r1, #128	@ 0x80
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f84d 	bl	80087b4 <USBD_LL_StallEP>
 800771a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800771c:	e040      	b.n	80077a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc3e 	bl	8007fa2 <USBD_CtlError>
              break;
 8007726:	e03b      	b.n	80077a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d136      	bne.n	800779e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 f857 	bl	80087f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fce6 	bl	8008116 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff fde4 	bl	800731c <USBD_CoreFindEP>
 8007754:	4603      	mov	r3, r0
 8007756:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007758:	7b7b      	ldrb	r3, [r7, #13]
 800775a:	2bff      	cmp	r3, #255	@ 0xff
 800775c:	d01f      	beq.n	800779e <USBD_StdEPReq+0x1c6>
 800775e:	7b7b      	ldrb	r3, [r7, #13]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11c      	bne.n	800779e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007764:	7b7a      	ldrb	r2, [r7, #13]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800776c:	7b7a      	ldrb	r2, [r7, #13]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	@ 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800777c:	7b7a      	ldrb	r2, [r7, #13]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	32ae      	adds	r2, #174	@ 0xae
 8007782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007792:	e004      	b.n	800779e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc03 	bl	8007fa2 <USBD_CtlError>
              break;
 800779c:	e000      	b.n	80077a0 <USBD_StdEPReq+0x1c8>
              break;
 800779e:	bf00      	nop
          }
          break;
 80077a0:	e0ab      	b.n	80078fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d002      	beq.n	80077b4 <USBD_StdEPReq+0x1dc>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d032      	beq.n	8007818 <USBD_StdEPReq+0x240>
 80077b2:	e097      	b.n	80078e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <USBD_StdEPReq+0x1f2>
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b80      	cmp	r3, #128	@ 0x80
 80077be:	d004      	beq.n	80077ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fbed 	bl	8007fa2 <USBD_CtlError>
                break;
 80077c8:	e091      	b.n	80078ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	da0b      	bge.n	80077ea <USBD_StdEPReq+0x212>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	3310      	adds	r3, #16
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	3304      	adds	r3, #4
 80077e8:	e00b      	b.n	8007802 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	3304      	adds	r3, #4
 8007802:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2202      	movs	r2, #2
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fc43 	bl	800809c <USBD_CtlSendData>
              break;
 8007816:	e06a      	b.n	80078ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	da11      	bge.n	8007844 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	f003 020f 	and.w	r2, r3, #15
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	3324      	adds	r3, #36	@ 0x24
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d117      	bne.n	800786a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbb0 	bl	8007fa2 <USBD_CtlError>
                  break;
 8007842:	e054      	b.n	80078ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d104      	bne.n	800786a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb9d 	bl	8007fa2 <USBD_CtlError>
                  break;
 8007868:	e041      	b.n	80078ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da0b      	bge.n	800788a <USBD_StdEPReq+0x2b2>
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	3310      	adds	r3, #16
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	3304      	adds	r3, #4
 8007888:	e00b      	b.n	80078a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	3304      	adds	r3, #4
 80078a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <USBD_StdEPReq+0x2d8>
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b80      	cmp	r3, #128	@ 0x80
 80078ae:	d103      	bne.n	80078b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e00e      	b.n	80078d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 ffb7 	bl	8008830 <USBD_LL_IsStallEP>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2202      	movs	r2, #2
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fbdd 	bl	800809c <USBD_CtlSendData>
              break;
 80078e2:	e004      	b.n	80078ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fb5b 	bl	8007fa2 <USBD_CtlError>
              break;
 80078ec:	bf00      	nop
          }
          break;
 80078ee:	e004      	b.n	80078fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fb55 	bl	8007fa2 <USBD_CtlError>
          break;
 80078f8:	bf00      	nop
      }
      break;
 80078fa:	e005      	b.n	8007908 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fb4f 	bl	8007fa2 <USBD_CtlError>
      break;
 8007904:	e000      	b.n	8007908 <USBD_StdEPReq+0x330>
      break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	2b06      	cmp	r3, #6
 8007936:	f200 8128 	bhi.w	8007b8a <USBD_GetDescriptor+0x276>
 800793a:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <USBD_GetDescriptor+0x2c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007975 	.word	0x08007975
 8007948:	080079b5 	.word	0x080079b5
 800794c:	08007b8b 	.word	0x08007b8b
 8007950:	08007b8b 	.word	0x08007b8b
 8007954:	08007b2b 	.word	0x08007b2b
 8007958:	08007b57 	.word	0x08007b57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7c12      	ldrb	r2, [r2, #16]
 8007968:	f107 0108 	add.w	r1, r7, #8
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
 8007970:	60f8      	str	r0, [r7, #12]
      break;
 8007972:	e112      	b.n	8007b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	7c1b      	ldrb	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10d      	bne.n	8007998 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007984:	f107 0208 	add.w	r2, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	2202      	movs	r2, #2
 8007994:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007996:	e100      	b.n	8007b9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	f107 0208 	add.w	r2, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	2202      	movs	r2, #2
 80079b0:	701a      	strb	r2, [r3, #0]
      break;
 80079b2:	e0f2      	b.n	8007b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	885b      	ldrh	r3, [r3, #2]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	f200 80ac 	bhi.w	8007b18 <USBD_GetDescriptor+0x204>
 80079c0:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <USBD_GetDescriptor+0xb4>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	08007a15 	.word	0x08007a15
 80079d0:	08007a49 	.word	0x08007a49
 80079d4:	08007a7d 	.word	0x08007a7d
 80079d8:	08007ab1 	.word	0x08007ab1
 80079dc:	08007ae5 	.word	0x08007ae5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e091      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 facb 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e089      	b.n	8007b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e077      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fab1 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e06f      	b.n	8007b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6a:	e05d      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa97 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	3301      	adds	r3, #1
 8007a78:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7a:	e055      	b.n	8007b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9e:	e043      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa7d 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
          break;
 8007aae:	e03b      	b.n	8007b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	7c12      	ldrb	r2, [r2, #16]
 8007ac8:	f107 0108 	add.w	r1, r7, #8
 8007acc:	4610      	mov	r0, r2
 8007ace:	4798      	blx	r3
 8007ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad2:	e029      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa63 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae2:	e021      	b.n	8007b28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	f107 0108 	add.w	r1, r7, #8
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b06:	e00f      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa49 	bl	8007fa2 <USBD_CtlError>
            err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
          break;
 8007b16:	e007      	b.n	8007b28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa41 	bl	8007fa2 <USBD_CtlError>
          err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b26:	bf00      	nop
      }
      break;
 8007b28:	e037      	b.n	8007b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7c1b      	ldrb	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4798      	blx	r3
 8007b42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b44:	e029      	b.n	8007b9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa2a 	bl	8007fa2 <USBD_CtlError>
        err++;
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	3301      	adds	r3, #1
 8007b52:	72fb      	strb	r3, [r7, #11]
      break;
 8007b54:	e021      	b.n	8007b9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7c1b      	ldrb	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10d      	bne.n	8007b7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b66:	f107 0208 	add.w	r2, r7, #8
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4798      	blx	r3
 8007b6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3301      	adds	r3, #1
 8007b74:	2207      	movs	r2, #7
 8007b76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b78:	e00f      	b.n	8007b9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa10 	bl	8007fa2 <USBD_CtlError>
        err++;
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	3301      	adds	r3, #1
 8007b86:	72fb      	strb	r3, [r7, #11]
      break;
 8007b88:	e007      	b.n	8007b9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fa08 	bl	8007fa2 <USBD_CtlError>
      err++;
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	3301      	adds	r3, #1
 8007b96:	72fb      	strb	r3, [r7, #11]
      break;
 8007b98:	bf00      	nop
  }

  if (err != 0U)
 8007b9a:	7afb      	ldrb	r3, [r7, #11]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d11e      	bne.n	8007bde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	88db      	ldrh	r3, [r3, #6]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d016      	beq.n	8007bd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ba8:	893b      	ldrh	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00e      	beq.n	8007bcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	88da      	ldrh	r2, [r3, #6]
 8007bb2:	893b      	ldrh	r3, [r7, #8]
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	bf28      	it	cs
 8007bb8:	4613      	movcs	r3, r2
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fa69 	bl	800809c <USBD_CtlSendData>
 8007bca:	e009      	b.n	8007be0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f9e7 	bl	8007fa2 <USBD_CtlError>
 8007bd4:	e004      	b.n	8007be0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa9d 	bl	8008116 <USBD_CtlSendStatus>
 8007bdc:	e000      	b.n	8007be0 <USBD_GetDescriptor+0x2cc>
    return;
 8007bde:	bf00      	nop
  }
}
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop

08007be8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	889b      	ldrh	r3, [r3, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d131      	bne.n	8007c5e <USBD_SetAddress+0x76>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	88db      	ldrh	r3, [r3, #6]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d12d      	bne.n	8007c5e <USBD_SetAddress+0x76>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c08:	d829      	bhi.n	8007c5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d104      	bne.n	8007c2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9bc 	bl	8007fa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2a:	e01d      	b.n	8007c68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7bfa      	ldrb	r2, [r7, #15]
 8007c30:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fe25 	bl	8008888 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa69 	bl	8008116 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c52:	e009      	b.n	8007c68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5c:	e004      	b.n	8007c68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f99e 	bl	8007fa2 <USBD_CtlError>
  }
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	4b4e      	ldr	r3, [pc, #312]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007c86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c88:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d905      	bls.n	8007c9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f985 	bl	8007fa2 <USBD_CtlError>
    return USBD_FAIL;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e08c      	b.n	8007db6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d002      	beq.n	8007cae <USBD_SetConfig+0x3e>
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d029      	beq.n	8007d00 <USBD_SetConfig+0x90>
 8007cac:	e075      	b.n	8007d9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cae:	4b44      	ldr	r3, [pc, #272]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d020      	beq.n	8007cf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cb6:	4b42      	ldr	r3, [pc, #264]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fe ffe3 	bl	8006c92 <USBD_SetClassConfig>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f962 	bl	8007fa2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ce6:	e065      	b.n	8007db4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa14 	bl	8008116 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007cf6:	e05d      	b.n	8007db4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa0c 	bl	8008116 <USBD_CtlSendStatus>
      break;
 8007cfe:	e059      	b.n	8007db4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d00:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d112      	bne.n	8007d2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d10:	4b2b      	ldr	r3, [pc, #172]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d1a:	4b29      	ldr	r3, [pc, #164]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe ffd2 	bl	8006cca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f9f5 	bl	8008116 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d2c:	e042      	b.n	8007db4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d2e:	4b24      	ldr	r3, [pc, #144]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d02a      	beq.n	8007d92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fe ffc0 	bl	8006cca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fe ff99 	bl	8006c92 <USBD_SetClassConfig>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00f      	beq.n	8007d8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f918 	bl	8007fa2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe ffa5 	bl	8006cca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d88:	e014      	b.n	8007db4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9c3 	bl	8008116 <USBD_CtlSendStatus>
      break;
 8007d90:	e010      	b.n	8007db4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f9bf 	bl	8008116 <USBD_CtlSendStatus>
      break;
 8007d98:	e00c      	b.n	8007db4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f900 	bl	8007fa2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007da2:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <USBD_SetConfig+0x150>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ff8e 	bl	8006cca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dae:	2303      	movs	r3, #3
 8007db0:	73fb      	strb	r3, [r7, #15]
      break;
 8007db2:	bf00      	nop
  }

  return ret;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000c9c 	.word	0x20000c9c

08007dc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d004      	beq.n	8007de0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8e2 	bl	8007fa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dde:	e023      	b.n	8007e28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	dc02      	bgt.n	8007df2 <USBD_GetConfig+0x2e>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dc03      	bgt.n	8007df8 <USBD_GetConfig+0x34>
 8007df0:	e015      	b.n	8007e1e <USBD_GetConfig+0x5a>
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d00b      	beq.n	8007e0e <USBD_GetConfig+0x4a>
 8007df6:	e012      	b.n	8007e1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3308      	adds	r3, #8
 8007e02:	2201      	movs	r2, #1
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f948 	bl	800809c <USBD_CtlSendData>
        break;
 8007e0c:	e00c      	b.n	8007e28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	2201      	movs	r2, #1
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f940 	bl	800809c <USBD_CtlSendData>
        break;
 8007e1c:	e004      	b.n	8007e28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8be 	bl	8007fa2 <USBD_CtlError>
        break;
 8007e26:	bf00      	nop
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d81e      	bhi.n	8007e86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	88db      	ldrh	r3, [r3, #6]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d004      	beq.n	8007e5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8a5 	bl	8007fa2 <USBD_CtlError>
        break;
 8007e58:	e01a      	b.n	8007e90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f043 0202 	orr.w	r2, r3, #2
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f90c 	bl	800809c <USBD_CtlSendData>
      break;
 8007e84:	e004      	b.n	8007e90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f88a 	bl	8007fa2 <USBD_CtlError>
      break;
 8007e8e:	bf00      	nop
  }
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	885b      	ldrh	r3, [r3, #2]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d107      	bne.n	8007eba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f92f 	bl	8008116 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007eb8:	e013      	b.n	8007ee2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d10b      	bne.n	8007eda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	889b      	ldrh	r3, [r3, #4]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f91f 	bl	8008116 <USBD_CtlSendStatus>
}
 8007ed8:	e003      	b.n	8007ee2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f860 	bl	8007fa2 <USBD_CtlError>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d80b      	bhi.n	8007f1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	885b      	ldrh	r3, [r3, #2]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d10c      	bne.n	8007f24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8ff 	bl	8008116 <USBD_CtlSendStatus>
      }
      break;
 8007f18:	e004      	b.n	8007f24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f840 	bl	8007fa2 <USBD_CtlError>
      break;
 8007f22:	e000      	b.n	8007f26 <USBD_ClrFeature+0x3c>
      break;
 8007f24:	bf00      	nop
  }
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fa40 	bl	80073de <SWAPBYTE>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	461a      	mov	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff fa33 	bl	80073de <SWAPBYTE>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fa26 	bl	80073de <SWAPBYTE>
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	80da      	strh	r2, [r3, #6]
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fac:	2180      	movs	r1, #128	@ 0x80
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fc00 	bl	80087b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbfc 	bl	80087b4 <USBD_LL_StallEP>
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d042      	beq.n	8008060 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007fde:	6938      	ldr	r0, [r7, #16]
 8007fe0:	f000 f842 	bl	8008068 <USBD_GetLen>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fee:	d808      	bhi.n	8008002 <USBD_GetString+0x3e>
 8007ff0:	6938      	ldr	r0, [r7, #16]
 8007ff2:	f000 f839 	bl	8008068 <USBD_GetLen>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	e001      	b.n	8008006 <USBD_GetString+0x42>
 8008002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	4413      	add	r3, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7812      	ldrb	r2, [r2, #0]
 8008014:	701a      	strb	r2, [r3, #0]
  idx++;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	3301      	adds	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	4413      	add	r3, r2
 8008022:	2203      	movs	r2, #3
 8008024:	701a      	strb	r2, [r3, #0]
  idx++;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	3301      	adds	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800802c:	e013      	b.n	8008056 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	4413      	add	r3, r2
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3301      	adds	r3, #1
 800803e:	613b      	str	r3, [r7, #16]
    idx++;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	3301      	adds	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	4413      	add	r3, r2
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	3301      	adds	r3, #1
 8008054:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e7      	bne.n	800802e <USBD_GetString+0x6a>
 800805e:	e000      	b.n	8008062 <USBD_GetString+0x9e>
    return;
 8008060:	bf00      	nop
  }
}
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008078:	e005      	b.n	8008086 <USBD_GetLen+0x1e>
  {
    len++;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3301      	adds	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	3301      	adds	r3, #1
 8008084:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f5      	bne.n	800807a <USBD_GetLen+0x12>
  }

  return len;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	2100      	movs	r1, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fbff 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fbee 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fbfe 	bl	8008908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2204      	movs	r2, #4
 8008122:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008126:	2300      	movs	r3, #0
 8008128:	2200      	movs	r2, #0
 800812a:	2100      	movs	r1, #0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbca 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800814c:	2300      	movs	r3, #0
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fbd8 	bl	8008908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008168:	2200      	movs	r2, #0
 800816a:	490e      	ldr	r1, [pc, #56]	@ (80081a4 <MX_USB_DEVICE_Init+0x40>)
 800816c:	480e      	ldr	r0, [pc, #56]	@ (80081a8 <MX_USB_DEVICE_Init+0x44>)
 800816e:	f7fe fd13 	bl	8006b98 <USBD_Init>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008178:	f7f8 fb9a 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800817c:	490b      	ldr	r1, [pc, #44]	@ (80081ac <MX_USB_DEVICE_Init+0x48>)
 800817e:	480a      	ldr	r0, [pc, #40]	@ (80081a8 <MX_USB_DEVICE_Init+0x44>)
 8008180:	f7fe fd3a 	bl	8006bf8 <USBD_RegisterClass>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800818a:	f7f8 fb91 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800818e:	4806      	ldr	r0, [pc, #24]	@ (80081a8 <MX_USB_DEVICE_Init+0x44>)
 8008190:	f7fe fd68 	bl	8006c64 <USBD_Start>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800819a:	f7f8 fb89 	bl	80008b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	200000cc 	.word	0x200000cc
 80081a8:	20000ca0 	.word	0x20000ca0
 80081ac:	2000000c 	.word	0x2000000c

080081b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2212      	movs	r2, #18
 80081c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081c2:	4b03      	ldr	r3, [pc, #12]	@ (80081d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	200000e8 	.word	0x200000e8

080081d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2204      	movs	r2, #4
 80081e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	@ (80081f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	200000fc 	.word	0x200000fc

080081f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4907      	ldr	r1, [pc, #28]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
 800820e:	4808      	ldr	r0, [pc, #32]	@ (8008230 <USBD_FS_ProductStrDescriptor+0x38>)
 8008210:	f7ff fed8 	bl	8007fc4 <USBD_GetString>
 8008214:	e004      	b.n	8008220 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4904      	ldr	r1, [pc, #16]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
 800821a:	4805      	ldr	r0, [pc, #20]	@ (8008230 <USBD_FS_ProductStrDescriptor+0x38>)
 800821c:	f7ff fed2 	bl	8007fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008220:	4b02      	ldr	r3, [pc, #8]	@ (800822c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000f7c 	.word	0x20000f7c
 8008230:	08009adc 	.word	0x08009adc

08008234 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	4904      	ldr	r1, [pc, #16]	@ (8008254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008244:	4804      	ldr	r0, [pc, #16]	@ (8008258 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008246:	f7ff febd 	bl	8007fc4 <USBD_GetString>
  return USBD_StrDesc;
 800824a:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000f7c 	.word	0x20000f7c
 8008258:	08009af4 	.word	0x08009af4

0800825c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	221a      	movs	r2, #26
 800826c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800826e:	f000 f843 	bl	80082f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008272:	4b02      	ldr	r3, [pc, #8]	@ (800827c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000100 	.word	0x20000100

08008280 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4907      	ldr	r1, [pc, #28]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008296:	4808      	ldr	r0, [pc, #32]	@ (80082b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008298:	f7ff fe94 	bl	8007fc4 <USBD_GetString>
 800829c:	e004      	b.n	80082a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4904      	ldr	r1, [pc, #16]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a2:	4805      	ldr	r0, [pc, #20]	@ (80082b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a4:	f7ff fe8e 	bl	8007fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000f7c 	.word	0x20000f7c
 80082b8:	08009b08 	.word	0x08009b08

080082bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	4907      	ldr	r1, [pc, #28]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082d2:	4808      	ldr	r0, [pc, #32]	@ (80082f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082d4:	f7ff fe76 	bl	8007fc4 <USBD_GetString>
 80082d8:	e004      	b.n	80082e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4904      	ldr	r1, [pc, #16]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082de:	4805      	ldr	r0, [pc, #20]	@ (80082f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e0:	f7ff fe70 	bl	8007fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e4:	4b02      	ldr	r3, [pc, #8]	@ (80082f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000f7c 	.word	0x20000f7c
 80082f4:	08009b14 	.word	0x08009b14

080082f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <Get_SerialNum+0x44>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008304:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <Get_SerialNum+0x48>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800830a:	4b0e      	ldr	r3, [pc, #56]	@ (8008344 <Get_SerialNum+0x4c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800831e:	2208      	movs	r2, #8
 8008320:	4909      	ldr	r1, [pc, #36]	@ (8008348 <Get_SerialNum+0x50>)
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f814 	bl	8008350 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008328:	2204      	movs	r2, #4
 800832a:	4908      	ldr	r1, [pc, #32]	@ (800834c <Get_SerialNum+0x54>)
 800832c:	68b8      	ldr	r0, [r7, #8]
 800832e:	f000 f80f 	bl	8008350 <IntToUnicode>
  }
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	1fff7a10 	.word	0x1fff7a10
 8008340:	1fff7a14 	.word	0x1fff7a14
 8008344:	1fff7a18 	.word	0x1fff7a18
 8008348:	20000102 	.word	0x20000102
 800834c:	20000112 	.word	0x20000112

08008350 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
 8008366:	e027      	b.n	80083b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0f1b      	lsrs	r3, r3, #28
 800836c:	2b09      	cmp	r3, #9
 800836e:	d80b      	bhi.n	8008388 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	b2da      	uxtb	r2, r3
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4619      	mov	r1, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	440b      	add	r3, r1
 8008380:	3230      	adds	r2, #48	@ 0x30
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e00a      	b.n	800839e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0f1b      	lsrs	r3, r3, #28
 800838c:	b2da      	uxtb	r2, r3
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4619      	mov	r1, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	440b      	add	r3, r1
 8008398:	3237      	adds	r2, #55	@ 0x37
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	011b      	lsls	r3, r3, #4
 80083a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	3301      	adds	r3, #1
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	3301      	adds	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	7dfa      	ldrb	r2, [r7, #23]
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3d3      	bcc.n	8008368 <IntToUnicode+0x18>
  }
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
	...

080083d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	@ 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083f0:	d13a      	bne.n	8008468 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 80083f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 80083fc:	f043 0301 	orr.w	r3, r3, #1
 8008400:	6313      	str	r3, [r2, #48]	@ 0x30
 8008402:	4b1b      	ldr	r3, [pc, #108]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800840e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008414:	2302      	movs	r3, #2
 8008416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800841c:	2303      	movs	r3, #3
 800841e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008420:	230a      	movs	r3, #10
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	4619      	mov	r1, r3
 800842a:	4812      	ldr	r0, [pc, #72]	@ (8008474 <HAL_PCD_MspInit+0xa4>)
 800842c:	f7fa f95e 	bl	80026ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008430:	4b0f      	ldr	r3, [pc, #60]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 8008432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008434:	4a0e      	ldr	r2, [pc, #56]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 8008436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843a:	6353      	str	r3, [r2, #52]	@ 0x34
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	4b0b      	ldr	r3, [pc, #44]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 8008442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008444:	4a0a      	ldr	r2, [pc, #40]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 8008446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800844a:	6453      	str	r3, [r2, #68]	@ 0x44
 800844c:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <HAL_PCD_MspInit+0xa0>)
 800844e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008458:	2200      	movs	r2, #0
 800845a:	2100      	movs	r1, #0
 800845c:	2043      	movs	r0, #67	@ 0x43
 800845e:	f7fa f90e 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008462:	2043      	movs	r0, #67	@ 0x43
 8008464:	f7fa f927 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008468:	bf00      	nop
 800846a:	3728      	adds	r7, #40	@ 0x28
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40023800 	.word	0x40023800
 8008474:	40020000 	.word	0x40020000

08008478 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fc35 	bl	8006cfe <USBD_LL_SetupStage>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7fe fc6f 	bl	8006da8 <USBD_LL_DataOutStage>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	3320      	adds	r3, #32
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f7fe fd08 	bl	8006f0e <USBD_LL_DataInStage>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fe42 	bl	800719e <USBD_LL_SOF>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	79db      	ldrb	r3, [r3, #7]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
 800853a:	e008      	b.n	800854e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	79db      	ldrb	r3, [r3, #7]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d102      	bne.n	800854a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	e001      	b.n	800854e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800854a:	f7f8 f9b1 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008554:	7bfa      	ldrb	r2, [r7, #15]
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fddc 	bl	8007116 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fd84 	bl	8007072 <USBD_LL_Reset>
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fdd7 	bl	8007136 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7adb      	ldrb	r3, [r3, #11]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085a8:	4b04      	ldr	r3, [pc, #16]	@ (80085bc <HAL_PCD_SuspendCallback+0x48>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	4a03      	ldr	r2, [pc, #12]	@ (80085bc <HAL_PCD_SuspendCallback+0x48>)
 80085ae:	f043 0306 	orr.w	r3, r3, #6
 80085b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fdcd 	bl	800716e <USBD_LL_Resume>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fe25 	bl	8007242 <USBD_LL_IsoOUTIncomplete>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fde1 	bl	80071de <USBD_LL_IsoINIncomplete>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fe37 	bl	80072a6 <USBD_LL_DevConnected>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fe34 	bl	80072bc <USBD_LL_DevDisconnected>
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d13c      	bne.n	80086e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800866c:	4a20      	ldr	r2, [pc, #128]	@ (80086f0 <USBD_LL_Init+0x94>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a1e      	ldr	r2, [pc, #120]	@ (80086f0 <USBD_LL_Init+0x94>)
 8008678:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800867c:	4b1c      	ldr	r3, [pc, #112]	@ (80086f0 <USBD_LL_Init+0x94>)
 800867e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008682:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008684:	4b1a      	ldr	r3, [pc, #104]	@ (80086f0 <USBD_LL_Init+0x94>)
 8008686:	2204      	movs	r2, #4
 8008688:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800868a:	4b19      	ldr	r3, [pc, #100]	@ (80086f0 <USBD_LL_Init+0x94>)
 800868c:	2202      	movs	r2, #2
 800868e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008690:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <USBD_LL_Init+0x94>)
 8008692:	2200      	movs	r2, #0
 8008694:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008696:	4b16      	ldr	r3, [pc, #88]	@ (80086f0 <USBD_LL_Init+0x94>)
 8008698:	2202      	movs	r2, #2
 800869a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800869c:	4b14      	ldr	r3, [pc, #80]	@ (80086f0 <USBD_LL_Init+0x94>)
 800869e:	2200      	movs	r2, #0
 80086a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086a2:	4b13      	ldr	r3, [pc, #76]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086a8:	4b11      	ldr	r3, [pc, #68]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086ae:	4b10      	ldr	r3, [pc, #64]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086b4:	4b0e      	ldr	r3, [pc, #56]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086ba:	480d      	ldr	r0, [pc, #52]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086bc:	f7fa f9b4 	bl	8002a28 <HAL_PCD_Init>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086c6:	f7f8 f8f3 	bl	80008b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086ca:	2180      	movs	r1, #128	@ 0x80
 80086cc:	4808      	ldr	r0, [pc, #32]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086ce:	f7fb fbc8 	bl	8003e62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086d2:	2240      	movs	r2, #64	@ 0x40
 80086d4:	2100      	movs	r1, #0
 80086d6:	4806      	ldr	r0, [pc, #24]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086d8:	f7fb fb7c 	bl	8003dd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086dc:	2280      	movs	r2, #128	@ 0x80
 80086de:	2101      	movs	r1, #1
 80086e0:	4803      	ldr	r0, [pc, #12]	@ (80086f0 <USBD_LL_Init+0x94>)
 80086e2:	f7fb fb77 	bl	8003dd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	2000117c 	.word	0x2000117c

080086f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800870a:	4618      	mov	r0, r3
 800870c:	f7fa fa9b 	bl	8002c46 <HAL_PCD_Start>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f930 	bl	800897c <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	460b      	mov	r3, r1
 800873e:	70bb      	strb	r3, [r7, #2]
 8008740:	4613      	mov	r3, r2
 8008742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008752:	78bb      	ldrb	r3, [r7, #2]
 8008754:	883a      	ldrh	r2, [r7, #0]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	f7fa ff6f 	bl	800363a <HAL_PCD_EP_Open>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f90a 	bl	800897c <USBD_Get_USB_Status>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876c:	7bbb      	ldrb	r3, [r7, #14]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7fa ffba 	bl	800370e <HAL_PCD_EP_Close>
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 f8eb 	bl	800897c <USBD_Get_USB_Status>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fb f85a 	bl	800388c <HAL_PCD_EP_SetStall>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f8cc 	bl	800897c <USBD_Get_USB_Status>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f7fb f89e 	bl	8003952 <HAL_PCD_EP_ClrStall>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f8ad 	bl	800897c <USBD_Get_USB_Status>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008826:	7bbb      	ldrb	r3, [r7, #14]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008848:	2b00      	cmp	r3, #0
 800884a:	da0b      	bge.n	8008864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	4613      	mov	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	3316      	adds	r3, #22
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	e00b      	b.n	800887c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800887a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fa fea3 	bl	80035f2 <HAL_PCD_SetAddress>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f862 	bl	800897c <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
 80088d2:	460b      	mov	r3, r1
 80088d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088e4:	7af9      	ldrb	r1, [r7, #11]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	f7fa ff95 	bl	8003818 <HAL_PCD_EP_Transmit>
 80088ee:	4603      	mov	r3, r0
 80088f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f841 	bl	800897c <USBD_Get_USB_Status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	460b      	mov	r3, r1
 8008916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008926:	7af9      	ldrb	r1, [r7, #11]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	f7fa ff39 	bl	80037a2 <HAL_PCD_EP_Receive>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f820 	bl	800897c <USBD_Get_USB_Status>
 800893c:	4603      	mov	r3, r0
 800893e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008940:	7dbb      	ldrb	r3, [r7, #22]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008954:	4b03      	ldr	r3, [pc, #12]	@ (8008964 <USBD_static_malloc+0x18>)
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20001660 	.word	0x20001660

08008968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d817      	bhi.n	80089c0 <USBD_Get_USB_Status+0x44>
 8008990:	a201      	add	r2, pc, #4	@ (adr r2, 8008998 <USBD_Get_USB_Status+0x1c>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089a9 	.word	0x080089a9
 800899c:	080089af 	.word	0x080089af
 80089a0:	080089b5 	.word	0x080089b5
 80089a4:	080089bb 	.word	0x080089bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
    break;
 80089ac:	e00b      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089ae:	2303      	movs	r3, #3
 80089b0:	73fb      	strb	r3, [r7, #15]
    break;
 80089b2:	e008      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
    break;
 80089b8:	e005      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089ba:	2303      	movs	r3, #3
 80089bc:	73fb      	strb	r3, [r7, #15]
    break;
 80089be:	e002      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
    break;
 80089c4:	bf00      	nop
  }
  return usb_status;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <std>:
 80089d4:	2300      	movs	r3, #0
 80089d6:	b510      	push	{r4, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	e9c0 3300 	strd	r3, r3, [r0]
 80089de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089e2:	6083      	str	r3, [r0, #8]
 80089e4:	8181      	strh	r1, [r0, #12]
 80089e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80089e8:	81c2      	strh	r2, [r0, #14]
 80089ea:	6183      	str	r3, [r0, #24]
 80089ec:	4619      	mov	r1, r3
 80089ee:	2208      	movs	r2, #8
 80089f0:	305c      	adds	r0, #92	@ 0x5c
 80089f2:	f000 f9f9 	bl	8008de8 <memset>
 80089f6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <std+0x58>)
 80089f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80089fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <std+0x5c>)
 80089fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <std+0x60>)
 8008a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a02:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <std+0x64>)
 8008a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a06:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <std+0x68>)
 8008a08:	6224      	str	r4, [r4, #32]
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d006      	beq.n	8008a1c <std+0x48>
 8008a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a12:	4294      	cmp	r4, r2
 8008a14:	d002      	beq.n	8008a1c <std+0x48>
 8008a16:	33d0      	adds	r3, #208	@ 0xd0
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d105      	bne.n	8008a28 <std+0x54>
 8008a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a24:	f000 ba58 	b.w	8008ed8 <__retarget_lock_init_recursive>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08008c39 	.word	0x08008c39
 8008a30:	08008c5b 	.word	0x08008c5b
 8008a34:	08008c93 	.word	0x08008c93
 8008a38:	08008cb7 	.word	0x08008cb7
 8008a3c:	20001674 	.word	0x20001674

08008a40 <stdio_exit_handler>:
 8008a40:	4a02      	ldr	r2, [pc, #8]	@ (8008a4c <stdio_exit_handler+0xc>)
 8008a42:	4903      	ldr	r1, [pc, #12]	@ (8008a50 <stdio_exit_handler+0x10>)
 8008a44:	4803      	ldr	r0, [pc, #12]	@ (8008a54 <stdio_exit_handler+0x14>)
 8008a46:	f000 b869 	b.w	8008b1c <_fwalk_sglue>
 8008a4a:	bf00      	nop
 8008a4c:	2000011c 	.word	0x2000011c
 8008a50:	08009795 	.word	0x08009795
 8008a54:	2000012c 	.word	0x2000012c

08008a58 <cleanup_stdio>:
 8008a58:	6841      	ldr	r1, [r0, #4]
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <cleanup_stdio+0x34>)
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4604      	mov	r4, r0
 8008a62:	d001      	beq.n	8008a68 <cleanup_stdio+0x10>
 8008a64:	f000 fe96 	bl	8009794 <_fflush_r>
 8008a68:	68a1      	ldr	r1, [r4, #8]
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <cleanup_stdio+0x38>)
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <cleanup_stdio+0x1e>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fe8f 	bl	8009794 <_fflush_r>
 8008a76:	68e1      	ldr	r1, [r4, #12]
 8008a78:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <cleanup_stdio+0x3c>)
 8008a7a:	4299      	cmp	r1, r3
 8008a7c:	d004      	beq.n	8008a88 <cleanup_stdio+0x30>
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a84:	f000 be86 	b.w	8009794 <_fflush_r>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20001674 	.word	0x20001674
 8008a90:	200016dc 	.word	0x200016dc
 8008a94:	20001744 	.word	0x20001744

08008a98 <global_stdio_init.part.0>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac8 <global_stdio_init.part.0+0x30>)
 8008a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8008acc <global_stdio_init.part.0+0x34>)
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad0 <global_stdio_init.part.0+0x38>)
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2104      	movs	r1, #4
 8008aa8:	f7ff ff94 	bl	80089d4 <std>
 8008aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	2109      	movs	r1, #9
 8008ab4:	f7ff ff8e 	bl	80089d4 <std>
 8008ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008abc:	2202      	movs	r2, #2
 8008abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	f7ff bf86 	b.w	80089d4 <std>
 8008ac8:	200017ac 	.word	0x200017ac
 8008acc:	20001674 	.word	0x20001674
 8008ad0:	08008a41 	.word	0x08008a41

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 ba00 	b.w	8008eda <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	200017b5 	.word	0x200017b5

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 b9fb 	b.w	8008edc <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	200017b5 	.word	0x200017b5

08008aec <__sinit>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4604      	mov	r4, r0
 8008af0:	f7ff fff0 	bl	8008ad4 <__sfp_lock_acquire>
 8008af4:	6a23      	ldr	r3, [r4, #32]
 8008af6:	b11b      	cbz	r3, 8008b00 <__sinit+0x14>
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f7ff bff0 	b.w	8008ae0 <__sfp_lock_release>
 8008b00:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <__sinit+0x28>)
 8008b02:	6223      	str	r3, [r4, #32]
 8008b04:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <__sinit+0x2c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f5      	bne.n	8008af8 <__sinit+0xc>
 8008b0c:	f7ff ffc4 	bl	8008a98 <global_stdio_init.part.0>
 8008b10:	e7f2      	b.n	8008af8 <__sinit+0xc>
 8008b12:	bf00      	nop
 8008b14:	08008a59 	.word	0x08008a59
 8008b18:	200017ac 	.word	0x200017ac

08008b1c <_fwalk_sglue>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4607      	mov	r7, r0
 8008b22:	4688      	mov	r8, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	2600      	movs	r6, #0
 8008b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b30:	d505      	bpl.n	8008b3e <_fwalk_sglue+0x22>
 8008b32:	6824      	ldr	r4, [r4, #0]
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	d1f7      	bne.n	8008b28 <_fwalk_sglue+0xc>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d907      	bls.n	8008b54 <_fwalk_sglue+0x38>
 8008b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	d003      	beq.n	8008b54 <_fwalk_sglue+0x38>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c0      	blx	r8
 8008b52:	4306      	orrs	r6, r0
 8008b54:	3568      	adds	r5, #104	@ 0x68
 8008b56:	e7e9      	b.n	8008b2c <_fwalk_sglue+0x10>

08008b58 <iprintf>:
 8008b58:	b40f      	push	{r0, r1, r2, r3}
 8008b5a:	b507      	push	{r0, r1, r2, lr}
 8008b5c:	4906      	ldr	r1, [pc, #24]	@ (8008b78 <iprintf+0x20>)
 8008b5e:	ab04      	add	r3, sp, #16
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b66:	6881      	ldr	r1, [r0, #8]
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	f000 fae9 	bl	8009140 <_vfiprintf_r>
 8008b6e:	b003      	add	sp, #12
 8008b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b74:	b004      	add	sp, #16
 8008b76:	4770      	bx	lr
 8008b78:	20000128 	.word	0x20000128

08008b7c <_puts_r>:
 8008b7c:	6a03      	ldr	r3, [r0, #32]
 8008b7e:	b570      	push	{r4, r5, r6, lr}
 8008b80:	6884      	ldr	r4, [r0, #8]
 8008b82:	4605      	mov	r5, r0
 8008b84:	460e      	mov	r6, r1
 8008b86:	b90b      	cbnz	r3, 8008b8c <_puts_r+0x10>
 8008b88:	f7ff ffb0 	bl	8008aec <__sinit>
 8008b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b8e:	07db      	lsls	r3, r3, #31
 8008b90:	d405      	bmi.n	8008b9e <_puts_r+0x22>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	0598      	lsls	r0, r3, #22
 8008b96:	d402      	bmi.n	8008b9e <_puts_r+0x22>
 8008b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b9a:	f000 f99e 	bl	8008eda <__retarget_lock_acquire_recursive>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	0719      	lsls	r1, r3, #28
 8008ba2:	d502      	bpl.n	8008baa <_puts_r+0x2e>
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d135      	bne.n	8008c16 <_puts_r+0x9a>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 f8c5 	bl	8008d3c <__swsetup_r>
 8008bb2:	b380      	cbz	r0, 8008c16 <_puts_r+0x9a>
 8008bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8008bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bba:	07da      	lsls	r2, r3, #31
 8008bbc:	d405      	bmi.n	8008bca <_puts_r+0x4e>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	059b      	lsls	r3, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_puts_r+0x4e>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc6:	f000 f989 	bl	8008edc <__retarget_lock_release_recursive>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da04      	bge.n	8008bdc <_puts_r+0x60>
 8008bd2:	69a2      	ldr	r2, [r4, #24]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	dc17      	bgt.n	8008c08 <_puts_r+0x8c>
 8008bd8:	290a      	cmp	r1, #10
 8008bda:	d015      	beq.n	8008c08 <_puts_r+0x8c>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	7019      	strb	r1, [r3, #0]
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bea:	3b01      	subs	r3, #1
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d1ed      	bne.n	8008bce <_puts_r+0x52>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	da11      	bge.n	8008c1a <_puts_r+0x9e>
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	210a      	movs	r1, #10
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f85f 	bl	8008cbe <__swbuf_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d0d7      	beq.n	8008bb4 <_puts_r+0x38>
 8008c04:	250a      	movs	r5, #10
 8008c06:	e7d7      	b.n	8008bb8 <_puts_r+0x3c>
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 f857 	bl	8008cbe <__swbuf_r>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d1e7      	bne.n	8008be4 <_puts_r+0x68>
 8008c14:	e7ce      	b.n	8008bb4 <_puts_r+0x38>
 8008c16:	3e01      	subs	r6, #1
 8008c18:	e7e4      	b.n	8008be4 <_puts_r+0x68>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	220a      	movs	r2, #10
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e7ee      	b.n	8008c04 <_puts_r+0x88>
	...

08008c28 <puts>:
 8008c28:	4b02      	ldr	r3, [pc, #8]	@ (8008c34 <puts+0xc>)
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f7ff bfa5 	b.w	8008b7c <_puts_r>
 8008c32:	bf00      	nop
 8008c34:	20000128 	.word	0x20000128

08008c38 <__sread>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c40:	f000 f8fc 	bl	8008e3c <_read_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	bfab      	itete	ge
 8008c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c4c:	181b      	addge	r3, r3, r0
 8008c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c52:	bfac      	ite	ge
 8008c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c56:	81a3      	strhlt	r3, [r4, #12]
 8008c58:	bd10      	pop	{r4, pc}

08008c5a <__swrite>:
 8008c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5e:	461f      	mov	r7, r3
 8008c60:	898b      	ldrh	r3, [r1, #12]
 8008c62:	05db      	lsls	r3, r3, #23
 8008c64:	4605      	mov	r5, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	4616      	mov	r6, r2
 8008c6a:	d505      	bpl.n	8008c78 <__swrite+0x1e>
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	2302      	movs	r3, #2
 8008c72:	2200      	movs	r2, #0
 8008c74:	f000 f8d0 	bl	8008e18 <_lseek_r>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	4632      	mov	r2, r6
 8008c86:	463b      	mov	r3, r7
 8008c88:	4628      	mov	r0, r5
 8008c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	f000 b8e7 	b.w	8008e60 <_write_r>

08008c92 <__sseek>:
 8008c92:	b510      	push	{r4, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9a:	f000 f8bd 	bl	8008e18 <_lseek_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	bf15      	itete	ne
 8008ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cae:	81a3      	strheq	r3, [r4, #12]
 8008cb0:	bf18      	it	ne
 8008cb2:	81a3      	strhne	r3, [r4, #12]
 8008cb4:	bd10      	pop	{r4, pc}

08008cb6 <__sclose>:
 8008cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cba:	f000 b89d 	b.w	8008df8 <_close_r>

08008cbe <__swbuf_r>:
 8008cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc0:	460e      	mov	r6, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	b118      	cbz	r0, 8008cd0 <__swbuf_r+0x12>
 8008cc8:	6a03      	ldr	r3, [r0, #32]
 8008cca:	b90b      	cbnz	r3, 8008cd0 <__swbuf_r+0x12>
 8008ccc:	f7ff ff0e 	bl	8008aec <__sinit>
 8008cd0:	69a3      	ldr	r3, [r4, #24]
 8008cd2:	60a3      	str	r3, [r4, #8]
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	071a      	lsls	r2, r3, #28
 8008cd8:	d501      	bpl.n	8008cde <__swbuf_r+0x20>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	b943      	cbnz	r3, 8008cf0 <__swbuf_r+0x32>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 f82b 	bl	8008d3c <__swsetup_r>
 8008ce6:	b118      	cbz	r0, 8008cf0 <__swbuf_r+0x32>
 8008ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8008cec:	4638      	mov	r0, r7
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	6922      	ldr	r2, [r4, #16]
 8008cf4:	1a98      	subs	r0, r3, r2
 8008cf6:	6963      	ldr	r3, [r4, #20]
 8008cf8:	b2f6      	uxtb	r6, r6
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	4637      	mov	r7, r6
 8008cfe:	dc05      	bgt.n	8008d0c <__swbuf_r+0x4e>
 8008d00:	4621      	mov	r1, r4
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 fd46 	bl	8009794 <_fflush_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d1ed      	bne.n	8008ce8 <__swbuf_r+0x2a>
 8008d0c:	68a3      	ldr	r3, [r4, #8]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	6022      	str	r2, [r4, #0]
 8008d18:	701e      	strb	r6, [r3, #0]
 8008d1a:	6962      	ldr	r2, [r4, #20]
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d004      	beq.n	8008d2c <__swbuf_r+0x6e>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	07db      	lsls	r3, r3, #31
 8008d26:	d5e1      	bpl.n	8008cec <__swbuf_r+0x2e>
 8008d28:	2e0a      	cmp	r6, #10
 8008d2a:	d1df      	bne.n	8008cec <__swbuf_r+0x2e>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fd30 	bl	8009794 <_fflush_r>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d0d9      	beq.n	8008cec <__swbuf_r+0x2e>
 8008d38:	e7d6      	b.n	8008ce8 <__swbuf_r+0x2a>
	...

08008d3c <__swsetup_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4b29      	ldr	r3, [pc, #164]	@ (8008de4 <__swsetup_r+0xa8>)
 8008d40:	4605      	mov	r5, r0
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	460c      	mov	r4, r1
 8008d46:	b118      	cbz	r0, 8008d50 <__swsetup_r+0x14>
 8008d48:	6a03      	ldr	r3, [r0, #32]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <__swsetup_r+0x14>
 8008d4c:	f7ff fece 	bl	8008aec <__sinit>
 8008d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d54:	0719      	lsls	r1, r3, #28
 8008d56:	d422      	bmi.n	8008d9e <__swsetup_r+0x62>
 8008d58:	06da      	lsls	r2, r3, #27
 8008d5a:	d407      	bmi.n	8008d6c <__swsetup_r+0x30>
 8008d5c:	2209      	movs	r2, #9
 8008d5e:	602a      	str	r2, [r5, #0]
 8008d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d64:	81a3      	strh	r3, [r4, #12]
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	e033      	b.n	8008dd4 <__swsetup_r+0x98>
 8008d6c:	0758      	lsls	r0, r3, #29
 8008d6e:	d512      	bpl.n	8008d96 <__swsetup_r+0x5a>
 8008d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d72:	b141      	cbz	r1, 8008d86 <__swsetup_r+0x4a>
 8008d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	d002      	beq.n	8008d82 <__swsetup_r+0x46>
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 f8bd 	bl	8008efc <_free_r>
 8008d82:	2300      	movs	r3, #0
 8008d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6063      	str	r3, [r4, #4]
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	f043 0308 	orr.w	r3, r3, #8
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	b94b      	cbnz	r3, 8008db6 <__swsetup_r+0x7a>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dac:	d003      	beq.n	8008db6 <__swsetup_r+0x7a>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 fd3d 	bl	8009830 <__smakebuf_r>
 8008db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dba:	f013 0201 	ands.w	r2, r3, #1
 8008dbe:	d00a      	beq.n	8008dd6 <__swsetup_r+0x9a>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	60a2      	str	r2, [r4, #8]
 8008dc4:	6962      	ldr	r2, [r4, #20]
 8008dc6:	4252      	negs	r2, r2
 8008dc8:	61a2      	str	r2, [r4, #24]
 8008dca:	6922      	ldr	r2, [r4, #16]
 8008dcc:	b942      	cbnz	r2, 8008de0 <__swsetup_r+0xa4>
 8008dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008dd2:	d1c5      	bne.n	8008d60 <__swsetup_r+0x24>
 8008dd4:	bd38      	pop	{r3, r4, r5, pc}
 8008dd6:	0799      	lsls	r1, r3, #30
 8008dd8:	bf58      	it	pl
 8008dda:	6962      	ldrpl	r2, [r4, #20]
 8008ddc:	60a2      	str	r2, [r4, #8]
 8008dde:	e7f4      	b.n	8008dca <__swsetup_r+0x8e>
 8008de0:	2000      	movs	r0, #0
 8008de2:	e7f7      	b.n	8008dd4 <__swsetup_r+0x98>
 8008de4:	20000128 	.word	0x20000128

08008de8 <memset>:
 8008de8:	4402      	add	r2, r0
 8008dea:	4603      	mov	r3, r0
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d100      	bne.n	8008df2 <memset+0xa>
 8008df0:	4770      	bx	lr
 8008df2:	f803 1b01 	strb.w	r1, [r3], #1
 8008df6:	e7f9      	b.n	8008dec <memset+0x4>

08008df8 <_close_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d06      	ldr	r5, [pc, #24]	@ (8008e14 <_close_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f7 fef5 	bl	8000bf2 <_close>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_close_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_close_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	200017b0 	.word	0x200017b0

08008e18 <_lseek_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	@ (8008e38 <_lseek_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f7 ff0a 	bl	8000c40 <_lseek>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_lseek_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_lseek_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200017b0 	.word	0x200017b0

08008e3c <_read_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d07      	ldr	r5, [pc, #28]	@ (8008e5c <_read_r+0x20>)
 8008e40:	4604      	mov	r4, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	4611      	mov	r1, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	602a      	str	r2, [r5, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f7f7 fe98 	bl	8000b80 <_read>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_read_r+0x1e>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_read_r+0x1e>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	200017b0 	.word	0x200017b0

08008e60 <_write_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	@ (8008e80 <_write_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f7 fea3 	bl	8000bba <_write>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_write_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_write_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	200017b0 	.word	0x200017b0

08008e84 <__errno>:
 8008e84:	4b01      	ldr	r3, [pc, #4]	@ (8008e8c <__errno+0x8>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000128 	.word	0x20000128

08008e90 <__libc_init_array>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4d0d      	ldr	r5, [pc, #52]	@ (8008ec8 <__libc_init_array+0x38>)
 8008e94:	4c0d      	ldr	r4, [pc, #52]	@ (8008ecc <__libc_init_array+0x3c>)
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	42a6      	cmp	r6, r4
 8008e9e:	d109      	bne.n	8008eb4 <__libc_init_array+0x24>
 8008ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ed0 <__libc_init_array+0x40>)
 8008ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ed4 <__libc_init_array+0x44>)
 8008ea4:	f000 fd32 	bl	800990c <_init>
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	2600      	movs	r6, #0
 8008eae:	42a6      	cmp	r6, r4
 8008eb0:	d105      	bne.n	8008ebe <__libc_init_array+0x2e>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb8:	4798      	blx	r3
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7ee      	b.n	8008e9c <__libc_init_array+0xc>
 8008ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec2:	4798      	blx	r3
 8008ec4:	3601      	adds	r6, #1
 8008ec6:	e7f2      	b.n	8008eae <__libc_init_array+0x1e>
 8008ec8:	0801f274 	.word	0x0801f274
 8008ecc:	0801f274 	.word	0x0801f274
 8008ed0:	0801f274 	.word	0x0801f274
 8008ed4:	0801f278 	.word	0x0801f278

08008ed8 <__retarget_lock_init_recursive>:
 8008ed8:	4770      	bx	lr

08008eda <__retarget_lock_acquire_recursive>:
 8008eda:	4770      	bx	lr

08008edc <__retarget_lock_release_recursive>:
 8008edc:	4770      	bx	lr

08008ede <memcpy>:
 8008ede:	440a      	add	r2, r1
 8008ee0:	4291      	cmp	r1, r2
 8008ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee6:	d100      	bne.n	8008eea <memcpy+0xc>
 8008ee8:	4770      	bx	lr
 8008eea:	b510      	push	{r4, lr}
 8008eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef4:	4291      	cmp	r1, r2
 8008ef6:	d1f9      	bne.n	8008eec <memcpy+0xe>
 8008ef8:	bd10      	pop	{r4, pc}
	...

08008efc <_free_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4605      	mov	r5, r0
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d041      	beq.n	8008f88 <_free_r+0x8c>
 8008f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f08:	1f0c      	subs	r4, r1, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfb8      	it	lt
 8008f0e:	18e4      	addlt	r4, r4, r3
 8008f10:	f000 f8e0 	bl	80090d4 <__malloc_lock>
 8008f14:	4a1d      	ldr	r2, [pc, #116]	@ (8008f8c <_free_r+0x90>)
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	b933      	cbnz	r3, 8008f28 <_free_r+0x2c>
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	6014      	str	r4, [r2, #0]
 8008f1e:	4628      	mov	r0, r5
 8008f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f24:	f000 b8dc 	b.w	80090e0 <__malloc_unlock>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d908      	bls.n	8008f3e <_free_r+0x42>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	1821      	adds	r1, r4, r0
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf01      	itttt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	1809      	addeq	r1, r1, r0
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	e7ed      	b.n	8008f1a <_free_r+0x1e>
 8008f3e:	461a      	mov	r2, r3
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	b10b      	cbz	r3, 8008f48 <_free_r+0x4c>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d9fa      	bls.n	8008f3e <_free_r+0x42>
 8008f48:	6811      	ldr	r1, [r2, #0]
 8008f4a:	1850      	adds	r0, r2, r1
 8008f4c:	42a0      	cmp	r0, r4
 8008f4e:	d10b      	bne.n	8008f68 <_free_r+0x6c>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	4401      	add	r1, r0
 8008f54:	1850      	adds	r0, r2, r1
 8008f56:	4283      	cmp	r3, r0
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	d1e0      	bne.n	8008f1e <_free_r+0x22>
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	6053      	str	r3, [r2, #4]
 8008f62:	4408      	add	r0, r1
 8008f64:	6010      	str	r0, [r2, #0]
 8008f66:	e7da      	b.n	8008f1e <_free_r+0x22>
 8008f68:	d902      	bls.n	8008f70 <_free_r+0x74>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	e7d6      	b.n	8008f1e <_free_r+0x22>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	1821      	adds	r1, r4, r0
 8008f74:	428b      	cmp	r3, r1
 8008f76:	bf04      	itt	eq
 8008f78:	6819      	ldreq	r1, [r3, #0]
 8008f7a:	685b      	ldreq	r3, [r3, #4]
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	bf04      	itt	eq
 8008f80:	1809      	addeq	r1, r1, r0
 8008f82:	6021      	streq	r1, [r4, #0]
 8008f84:	6054      	str	r4, [r2, #4]
 8008f86:	e7ca      	b.n	8008f1e <_free_r+0x22>
 8008f88:	bd38      	pop	{r3, r4, r5, pc}
 8008f8a:	bf00      	nop
 8008f8c:	200017bc 	.word	0x200017bc

08008f90 <sbrk_aligned>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4e0f      	ldr	r6, [pc, #60]	@ (8008fd0 <sbrk_aligned+0x40>)
 8008f94:	460c      	mov	r4, r1
 8008f96:	6831      	ldr	r1, [r6, #0]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b911      	cbnz	r1, 8008fa2 <sbrk_aligned+0x12>
 8008f9c:	f000 fca6 	bl	80098ec <_sbrk_r>
 8008fa0:	6030      	str	r0, [r6, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fca1 	bl	80098ec <_sbrk_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d103      	bne.n	8008fb6 <sbrk_aligned+0x26>
 8008fae:	f04f 34ff 	mov.w	r4, #4294967295
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	1cc4      	adds	r4, r0, #3
 8008fb8:	f024 0403 	bic.w	r4, r4, #3
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d0f8      	beq.n	8008fb2 <sbrk_aligned+0x22>
 8008fc0:	1a21      	subs	r1, r4, r0
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fc92 	bl	80098ec <_sbrk_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d1f2      	bne.n	8008fb2 <sbrk_aligned+0x22>
 8008fcc:	e7ef      	b.n	8008fae <sbrk_aligned+0x1e>
 8008fce:	bf00      	nop
 8008fd0:	200017b8 	.word	0x200017b8

08008fd4 <_malloc_r>:
 8008fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd8:	1ccd      	adds	r5, r1, #3
 8008fda:	f025 0503 	bic.w	r5, r5, #3
 8008fde:	3508      	adds	r5, #8
 8008fe0:	2d0c      	cmp	r5, #12
 8008fe2:	bf38      	it	cc
 8008fe4:	250c      	movcc	r5, #12
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	4606      	mov	r6, r0
 8008fea:	db01      	blt.n	8008ff0 <_malloc_r+0x1c>
 8008fec:	42a9      	cmp	r1, r5
 8008fee:	d904      	bls.n	8008ffa <_malloc_r+0x26>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	6033      	str	r3, [r6, #0]
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090d0 <_malloc_r+0xfc>
 8008ffe:	f000 f869 	bl	80090d4 <__malloc_lock>
 8009002:	f8d8 3000 	ldr.w	r3, [r8]
 8009006:	461c      	mov	r4, r3
 8009008:	bb44      	cbnz	r4, 800905c <_malloc_r+0x88>
 800900a:	4629      	mov	r1, r5
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff ffbf 	bl	8008f90 <sbrk_aligned>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	4604      	mov	r4, r0
 8009016:	d158      	bne.n	80090ca <_malloc_r+0xf6>
 8009018:	f8d8 4000 	ldr.w	r4, [r8]
 800901c:	4627      	mov	r7, r4
 800901e:	2f00      	cmp	r7, #0
 8009020:	d143      	bne.n	80090aa <_malloc_r+0xd6>
 8009022:	2c00      	cmp	r4, #0
 8009024:	d04b      	beq.n	80090be <_malloc_r+0xea>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	4639      	mov	r1, r7
 800902a:	4630      	mov	r0, r6
 800902c:	eb04 0903 	add.w	r9, r4, r3
 8009030:	f000 fc5c 	bl	80098ec <_sbrk_r>
 8009034:	4581      	cmp	r9, r0
 8009036:	d142      	bne.n	80090be <_malloc_r+0xea>
 8009038:	6821      	ldr	r1, [r4, #0]
 800903a:	1a6d      	subs	r5, r5, r1
 800903c:	4629      	mov	r1, r5
 800903e:	4630      	mov	r0, r6
 8009040:	f7ff ffa6 	bl	8008f90 <sbrk_aligned>
 8009044:	3001      	adds	r0, #1
 8009046:	d03a      	beq.n	80090be <_malloc_r+0xea>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	442b      	add	r3, r5
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	f8d8 3000 	ldr.w	r3, [r8]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	bb62      	cbnz	r2, 80090b0 <_malloc_r+0xdc>
 8009056:	f8c8 7000 	str.w	r7, [r8]
 800905a:	e00f      	b.n	800907c <_malloc_r+0xa8>
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	1b52      	subs	r2, r2, r5
 8009060:	d420      	bmi.n	80090a4 <_malloc_r+0xd0>
 8009062:	2a0b      	cmp	r2, #11
 8009064:	d917      	bls.n	8009096 <_malloc_r+0xc2>
 8009066:	1961      	adds	r1, r4, r5
 8009068:	42a3      	cmp	r3, r4
 800906a:	6025      	str	r5, [r4, #0]
 800906c:	bf18      	it	ne
 800906e:	6059      	strne	r1, [r3, #4]
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	bf08      	it	eq
 8009074:	f8c8 1000 	streq.w	r1, [r8]
 8009078:	5162      	str	r2, [r4, r5]
 800907a:	604b      	str	r3, [r1, #4]
 800907c:	4630      	mov	r0, r6
 800907e:	f000 f82f 	bl	80090e0 <__malloc_unlock>
 8009082:	f104 000b 	add.w	r0, r4, #11
 8009086:	1d23      	adds	r3, r4, #4
 8009088:	f020 0007 	bic.w	r0, r0, #7
 800908c:	1ac2      	subs	r2, r0, r3
 800908e:	bf1c      	itt	ne
 8009090:	1a1b      	subne	r3, r3, r0
 8009092:	50a3      	strne	r3, [r4, r2]
 8009094:	e7af      	b.n	8008ff6 <_malloc_r+0x22>
 8009096:	6862      	ldr	r2, [r4, #4]
 8009098:	42a3      	cmp	r3, r4
 800909a:	bf0c      	ite	eq
 800909c:	f8c8 2000 	streq.w	r2, [r8]
 80090a0:	605a      	strne	r2, [r3, #4]
 80090a2:	e7eb      	b.n	800907c <_malloc_r+0xa8>
 80090a4:	4623      	mov	r3, r4
 80090a6:	6864      	ldr	r4, [r4, #4]
 80090a8:	e7ae      	b.n	8009008 <_malloc_r+0x34>
 80090aa:	463c      	mov	r4, r7
 80090ac:	687f      	ldr	r7, [r7, #4]
 80090ae:	e7b6      	b.n	800901e <_malloc_r+0x4a>
 80090b0:	461a      	mov	r2, r3
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d1fb      	bne.n	80090b0 <_malloc_r+0xdc>
 80090b8:	2300      	movs	r3, #0
 80090ba:	6053      	str	r3, [r2, #4]
 80090bc:	e7de      	b.n	800907c <_malloc_r+0xa8>
 80090be:	230c      	movs	r3, #12
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	4630      	mov	r0, r6
 80090c4:	f000 f80c 	bl	80090e0 <__malloc_unlock>
 80090c8:	e794      	b.n	8008ff4 <_malloc_r+0x20>
 80090ca:	6005      	str	r5, [r0, #0]
 80090cc:	e7d6      	b.n	800907c <_malloc_r+0xa8>
 80090ce:	bf00      	nop
 80090d0:	200017bc 	.word	0x200017bc

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	@ (80090dc <__malloc_lock+0x8>)
 80090d6:	f7ff bf00 	b.w	8008eda <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	200017b4 	.word	0x200017b4

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	@ (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f7ff befb 	b.w	8008edc <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	200017b4 	.word	0x200017b4

080090ec <__sfputc_r>:
 80090ec:	6893      	ldr	r3, [r2, #8]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	b410      	push	{r4}
 80090f4:	6093      	str	r3, [r2, #8]
 80090f6:	da08      	bge.n	800910a <__sfputc_r+0x1e>
 80090f8:	6994      	ldr	r4, [r2, #24]
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	db01      	blt.n	8009102 <__sfputc_r+0x16>
 80090fe:	290a      	cmp	r1, #10
 8009100:	d103      	bne.n	800910a <__sfputc_r+0x1e>
 8009102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009106:	f7ff bdda 	b.w	8008cbe <__swbuf_r>
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	1c58      	adds	r0, r3, #1
 800910e:	6010      	str	r0, [r2, #0]
 8009110:	7019      	strb	r1, [r3, #0]
 8009112:	4608      	mov	r0, r1
 8009114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009118:	4770      	bx	lr

0800911a <__sfputs_r>:
 800911a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	4614      	mov	r4, r2
 8009122:	18d5      	adds	r5, r2, r3
 8009124:	42ac      	cmp	r4, r5
 8009126:	d101      	bne.n	800912c <__sfputs_r+0x12>
 8009128:	2000      	movs	r0, #0
 800912a:	e007      	b.n	800913c <__sfputs_r+0x22>
 800912c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009130:	463a      	mov	r2, r7
 8009132:	4630      	mov	r0, r6
 8009134:	f7ff ffda 	bl	80090ec <__sfputc_r>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d1f3      	bne.n	8009124 <__sfputs_r+0xa>
 800913c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009140 <_vfiprintf_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	460d      	mov	r5, r1
 8009146:	b09d      	sub	sp, #116	@ 0x74
 8009148:	4614      	mov	r4, r2
 800914a:	4698      	mov	r8, r3
 800914c:	4606      	mov	r6, r0
 800914e:	b118      	cbz	r0, 8009158 <_vfiprintf_r+0x18>
 8009150:	6a03      	ldr	r3, [r0, #32]
 8009152:	b90b      	cbnz	r3, 8009158 <_vfiprintf_r+0x18>
 8009154:	f7ff fcca 	bl	8008aec <__sinit>
 8009158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d405      	bmi.n	800916a <_vfiprintf_r+0x2a>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	059a      	lsls	r2, r3, #22
 8009162:	d402      	bmi.n	800916a <_vfiprintf_r+0x2a>
 8009164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009166:	f7ff feb8 	bl	8008eda <__retarget_lock_acquire_recursive>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	071b      	lsls	r3, r3, #28
 800916e:	d501      	bpl.n	8009174 <_vfiprintf_r+0x34>
 8009170:	692b      	ldr	r3, [r5, #16]
 8009172:	b99b      	cbnz	r3, 800919c <_vfiprintf_r+0x5c>
 8009174:	4629      	mov	r1, r5
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff fde0 	bl	8008d3c <__swsetup_r>
 800917c:	b170      	cbz	r0, 800919c <_vfiprintf_r+0x5c>
 800917e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009180:	07dc      	lsls	r4, r3, #31
 8009182:	d504      	bpl.n	800918e <_vfiprintf_r+0x4e>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	b01d      	add	sp, #116	@ 0x74
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	0598      	lsls	r0, r3, #22
 8009192:	d4f7      	bmi.n	8009184 <_vfiprintf_r+0x44>
 8009194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009196:	f7ff fea1 	bl	8008edc <__retarget_lock_release_recursive>
 800919a:	e7f3      	b.n	8009184 <_vfiprintf_r+0x44>
 800919c:	2300      	movs	r3, #0
 800919e:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a0:	2320      	movs	r3, #32
 80091a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091aa:	2330      	movs	r3, #48	@ 0x30
 80091ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800935c <_vfiprintf_r+0x21c>
 80091b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091b4:	f04f 0901 	mov.w	r9, #1
 80091b8:	4623      	mov	r3, r4
 80091ba:	469a      	mov	sl, r3
 80091bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c0:	b10a      	cbz	r2, 80091c6 <_vfiprintf_r+0x86>
 80091c2:	2a25      	cmp	r2, #37	@ 0x25
 80091c4:	d1f9      	bne.n	80091ba <_vfiprintf_r+0x7a>
 80091c6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ca:	d00b      	beq.n	80091e4 <_vfiprintf_r+0xa4>
 80091cc:	465b      	mov	r3, fp
 80091ce:	4622      	mov	r2, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7ff ffa1 	bl	800911a <__sfputs_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	f000 80a7 	beq.w	800932c <_vfiprintf_r+0x1ec>
 80091de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091e0:	445a      	add	r2, fp
 80091e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091e4:	f89a 3000 	ldrb.w	r3, [sl]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 809f 	beq.w	800932c <_vfiprintf_r+0x1ec>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f8:	f10a 0a01 	add.w	sl, sl, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009204:	931a      	str	r3, [sp, #104]	@ 0x68
 8009206:	4654      	mov	r4, sl
 8009208:	2205      	movs	r2, #5
 800920a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920e:	4853      	ldr	r0, [pc, #332]	@ (800935c <_vfiprintf_r+0x21c>)
 8009210:	f7f6 ffe6 	bl	80001e0 <memchr>
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	b9d8      	cbnz	r0, 8009250 <_vfiprintf_r+0x110>
 8009218:	06d1      	lsls	r1, r2, #27
 800921a:	bf44      	itt	mi
 800921c:	2320      	movmi	r3, #32
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009222:	0713      	lsls	r3, r2, #28
 8009224:	bf44      	itt	mi
 8009226:	232b      	movmi	r3, #43	@ 0x2b
 8009228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800922c:	f89a 3000 	ldrb.w	r3, [sl]
 8009230:	2b2a      	cmp	r3, #42	@ 0x2a
 8009232:	d015      	beq.n	8009260 <_vfiprintf_r+0x120>
 8009234:	9a07      	ldr	r2, [sp, #28]
 8009236:	4654      	mov	r4, sl
 8009238:	2000      	movs	r0, #0
 800923a:	f04f 0c0a 	mov.w	ip, #10
 800923e:	4621      	mov	r1, r4
 8009240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009244:	3b30      	subs	r3, #48	@ 0x30
 8009246:	2b09      	cmp	r3, #9
 8009248:	d94b      	bls.n	80092e2 <_vfiprintf_r+0x1a2>
 800924a:	b1b0      	cbz	r0, 800927a <_vfiprintf_r+0x13a>
 800924c:	9207      	str	r2, [sp, #28]
 800924e:	e014      	b.n	800927a <_vfiprintf_r+0x13a>
 8009250:	eba0 0308 	sub.w	r3, r0, r8
 8009254:	fa09 f303 	lsl.w	r3, r9, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	46a2      	mov	sl, r4
 800925e:	e7d2      	b.n	8009206 <_vfiprintf_r+0xc6>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	1d19      	adds	r1, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	9103      	str	r1, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfbb      	ittet	lt
 800926c:	425b      	neglt	r3, r3
 800926e:	f042 0202 	orrlt.w	r2, r2, #2
 8009272:	9307      	strge	r3, [sp, #28]
 8009274:	9307      	strlt	r3, [sp, #28]
 8009276:	bfb8      	it	lt
 8009278:	9204      	strlt	r2, [sp, #16]
 800927a:	7823      	ldrb	r3, [r4, #0]
 800927c:	2b2e      	cmp	r3, #46	@ 0x2e
 800927e:	d10a      	bne.n	8009296 <_vfiprintf_r+0x156>
 8009280:	7863      	ldrb	r3, [r4, #1]
 8009282:	2b2a      	cmp	r3, #42	@ 0x2a
 8009284:	d132      	bne.n	80092ec <_vfiprintf_r+0x1ac>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9203      	str	r2, [sp, #12]
 800928e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009292:	3402      	adds	r4, #2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800936c <_vfiprintf_r+0x22c>
 800929a:	7821      	ldrb	r1, [r4, #0]
 800929c:	2203      	movs	r2, #3
 800929e:	4650      	mov	r0, sl
 80092a0:	f7f6 ff9e 	bl	80001e0 <memchr>
 80092a4:	b138      	cbz	r0, 80092b6 <_vfiprintf_r+0x176>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	eba0 000a 	sub.w	r0, r0, sl
 80092ac:	2240      	movs	r2, #64	@ 0x40
 80092ae:	4082      	lsls	r2, r0
 80092b0:	4313      	orrs	r3, r2
 80092b2:	3401      	adds	r4, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	4829      	ldr	r0, [pc, #164]	@ (8009360 <_vfiprintf_r+0x220>)
 80092bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092c0:	2206      	movs	r2, #6
 80092c2:	f7f6 ff8d 	bl	80001e0 <memchr>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d03f      	beq.n	800934a <_vfiprintf_r+0x20a>
 80092ca:	4b26      	ldr	r3, [pc, #152]	@ (8009364 <_vfiprintf_r+0x224>)
 80092cc:	bb1b      	cbnz	r3, 8009316 <_vfiprintf_r+0x1d6>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	3307      	adds	r3, #7
 80092d2:	f023 0307 	bic.w	r3, r3, #7
 80092d6:	3308      	adds	r3, #8
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092dc:	443b      	add	r3, r7
 80092de:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e0:	e76a      	b.n	80091b8 <_vfiprintf_r+0x78>
 80092e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e6:	460c      	mov	r4, r1
 80092e8:	2001      	movs	r0, #1
 80092ea:	e7a8      	b.n	800923e <_vfiprintf_r+0xfe>
 80092ec:	2300      	movs	r3, #0
 80092ee:	3401      	adds	r4, #1
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	4619      	mov	r1, r3
 80092f4:	f04f 0c0a 	mov.w	ip, #10
 80092f8:	4620      	mov	r0, r4
 80092fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fe:	3a30      	subs	r2, #48	@ 0x30
 8009300:	2a09      	cmp	r2, #9
 8009302:	d903      	bls.n	800930c <_vfiprintf_r+0x1cc>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0c6      	beq.n	8009296 <_vfiprintf_r+0x156>
 8009308:	9105      	str	r1, [sp, #20]
 800930a:	e7c4      	b.n	8009296 <_vfiprintf_r+0x156>
 800930c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009310:	4604      	mov	r4, r0
 8009312:	2301      	movs	r3, #1
 8009314:	e7f0      	b.n	80092f8 <_vfiprintf_r+0x1b8>
 8009316:	ab03      	add	r3, sp, #12
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	462a      	mov	r2, r5
 800931c:	4b12      	ldr	r3, [pc, #72]	@ (8009368 <_vfiprintf_r+0x228>)
 800931e:	a904      	add	r1, sp, #16
 8009320:	4630      	mov	r0, r6
 8009322:	f3af 8000 	nop.w
 8009326:	4607      	mov	r7, r0
 8009328:	1c78      	adds	r0, r7, #1
 800932a:	d1d6      	bne.n	80092da <_vfiprintf_r+0x19a>
 800932c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800932e:	07d9      	lsls	r1, r3, #31
 8009330:	d405      	bmi.n	800933e <_vfiprintf_r+0x1fe>
 8009332:	89ab      	ldrh	r3, [r5, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d402      	bmi.n	800933e <_vfiprintf_r+0x1fe>
 8009338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800933a:	f7ff fdcf 	bl	8008edc <__retarget_lock_release_recursive>
 800933e:	89ab      	ldrh	r3, [r5, #12]
 8009340:	065b      	lsls	r3, r3, #25
 8009342:	f53f af1f 	bmi.w	8009184 <_vfiprintf_r+0x44>
 8009346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009348:	e71e      	b.n	8009188 <_vfiprintf_r+0x48>
 800934a:	ab03      	add	r3, sp, #12
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	462a      	mov	r2, r5
 8009350:	4b05      	ldr	r3, [pc, #20]	@ (8009368 <_vfiprintf_r+0x228>)
 8009352:	a904      	add	r1, sp, #16
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f879 	bl	800944c <_printf_i>
 800935a:	e7e4      	b.n	8009326 <_vfiprintf_r+0x1e6>
 800935c:	0801f238 	.word	0x0801f238
 8009360:	0801f242 	.word	0x0801f242
 8009364:	00000000 	.word	0x00000000
 8009368:	0800911b 	.word	0x0800911b
 800936c:	0801f23e 	.word	0x0801f23e

08009370 <_printf_common>:
 8009370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009374:	4616      	mov	r6, r2
 8009376:	4698      	mov	r8, r3
 8009378:	688a      	ldr	r2, [r1, #8]
 800937a:	690b      	ldr	r3, [r1, #16]
 800937c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009380:	4293      	cmp	r3, r2
 8009382:	bfb8      	it	lt
 8009384:	4613      	movlt	r3, r2
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800938c:	4607      	mov	r7, r0
 800938e:	460c      	mov	r4, r1
 8009390:	b10a      	cbz	r2, 8009396 <_printf_common+0x26>
 8009392:	3301      	adds	r3, #1
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	0699      	lsls	r1, r3, #26
 800939a:	bf42      	ittt	mi
 800939c:	6833      	ldrmi	r3, [r6, #0]
 800939e:	3302      	addmi	r3, #2
 80093a0:	6033      	strmi	r3, [r6, #0]
 80093a2:	6825      	ldr	r5, [r4, #0]
 80093a4:	f015 0506 	ands.w	r5, r5, #6
 80093a8:	d106      	bne.n	80093b8 <_printf_common+0x48>
 80093aa:	f104 0a19 	add.w	sl, r4, #25
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	6832      	ldr	r2, [r6, #0]
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	42ab      	cmp	r3, r5
 80093b6:	dc26      	bgt.n	8009406 <_printf_common+0x96>
 80093b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	3b00      	subs	r3, #0
 80093c0:	bf18      	it	ne
 80093c2:	2301      	movne	r3, #1
 80093c4:	0692      	lsls	r2, r2, #26
 80093c6:	d42b      	bmi.n	8009420 <_printf_common+0xb0>
 80093c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093cc:	4641      	mov	r1, r8
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c8      	blx	r9
 80093d2:	3001      	adds	r0, #1
 80093d4:	d01e      	beq.n	8009414 <_printf_common+0xa4>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	f003 0306 	and.w	r3, r3, #6
 80093de:	2b04      	cmp	r3, #4
 80093e0:	bf02      	ittt	eq
 80093e2:	68e5      	ldreq	r5, [r4, #12]
 80093e4:	6833      	ldreq	r3, [r6, #0]
 80093e6:	1aed      	subeq	r5, r5, r3
 80093e8:	68a3      	ldr	r3, [r4, #8]
 80093ea:	bf0c      	ite	eq
 80093ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f0:	2500      	movne	r5, #0
 80093f2:	4293      	cmp	r3, r2
 80093f4:	bfc4      	itt	gt
 80093f6:	1a9b      	subgt	r3, r3, r2
 80093f8:	18ed      	addgt	r5, r5, r3
 80093fa:	2600      	movs	r6, #0
 80093fc:	341a      	adds	r4, #26
 80093fe:	42b5      	cmp	r5, r6
 8009400:	d11a      	bne.n	8009438 <_printf_common+0xc8>
 8009402:	2000      	movs	r0, #0
 8009404:	e008      	b.n	8009418 <_printf_common+0xa8>
 8009406:	2301      	movs	r3, #1
 8009408:	4652      	mov	r2, sl
 800940a:	4641      	mov	r1, r8
 800940c:	4638      	mov	r0, r7
 800940e:	47c8      	blx	r9
 8009410:	3001      	adds	r0, #1
 8009412:	d103      	bne.n	800941c <_printf_common+0xac>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	3501      	adds	r5, #1
 800941e:	e7c6      	b.n	80093ae <_printf_common+0x3e>
 8009420:	18e1      	adds	r1, r4, r3
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	2030      	movs	r0, #48	@ 0x30
 8009426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800942a:	4422      	add	r2, r4
 800942c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009434:	3302      	adds	r3, #2
 8009436:	e7c7      	b.n	80093c8 <_printf_common+0x58>
 8009438:	2301      	movs	r3, #1
 800943a:	4622      	mov	r2, r4
 800943c:	4641      	mov	r1, r8
 800943e:	4638      	mov	r0, r7
 8009440:	47c8      	blx	r9
 8009442:	3001      	adds	r0, #1
 8009444:	d0e6      	beq.n	8009414 <_printf_common+0xa4>
 8009446:	3601      	adds	r6, #1
 8009448:	e7d9      	b.n	80093fe <_printf_common+0x8e>
	...

0800944c <_printf_i>:
 800944c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009450:	7e0f      	ldrb	r7, [r1, #24]
 8009452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009454:	2f78      	cmp	r7, #120	@ 0x78
 8009456:	4691      	mov	r9, r2
 8009458:	4680      	mov	r8, r0
 800945a:	460c      	mov	r4, r1
 800945c:	469a      	mov	sl, r3
 800945e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009462:	d807      	bhi.n	8009474 <_printf_i+0x28>
 8009464:	2f62      	cmp	r7, #98	@ 0x62
 8009466:	d80a      	bhi.n	800947e <_printf_i+0x32>
 8009468:	2f00      	cmp	r7, #0
 800946a:	f000 80d2 	beq.w	8009612 <_printf_i+0x1c6>
 800946e:	2f58      	cmp	r7, #88	@ 0x58
 8009470:	f000 80b9 	beq.w	80095e6 <_printf_i+0x19a>
 8009474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800947c:	e03a      	b.n	80094f4 <_printf_i+0xa8>
 800947e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009482:	2b15      	cmp	r3, #21
 8009484:	d8f6      	bhi.n	8009474 <_printf_i+0x28>
 8009486:	a101      	add	r1, pc, #4	@ (adr r1, 800948c <_printf_i+0x40>)
 8009488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094f9 	.word	0x080094f9
 8009494:	08009475 	.word	0x08009475
 8009498:	08009475 	.word	0x08009475
 800949c:	08009475 	.word	0x08009475
 80094a0:	08009475 	.word	0x08009475
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009475 	.word	0x08009475
 80094ac:	08009475 	.word	0x08009475
 80094b0:	08009475 	.word	0x08009475
 80094b4:	08009475 	.word	0x08009475
 80094b8:	080095f9 	.word	0x080095f9
 80094bc:	08009523 	.word	0x08009523
 80094c0:	080095b3 	.word	0x080095b3
 80094c4:	08009475 	.word	0x08009475
 80094c8:	08009475 	.word	0x08009475
 80094cc:	0800961b 	.word	0x0800961b
 80094d0:	08009475 	.word	0x08009475
 80094d4:	08009523 	.word	0x08009523
 80094d8:	08009475 	.word	0x08009475
 80094dc:	08009475 	.word	0x08009475
 80094e0:	080095bb 	.word	0x080095bb
 80094e4:	6833      	ldr	r3, [r6, #0]
 80094e6:	1d1a      	adds	r2, r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6032      	str	r2, [r6, #0]
 80094ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094f4:	2301      	movs	r3, #1
 80094f6:	e09d      	b.n	8009634 <_printf_i+0x1e8>
 80094f8:	6833      	ldr	r3, [r6, #0]
 80094fa:	6820      	ldr	r0, [r4, #0]
 80094fc:	1d19      	adds	r1, r3, #4
 80094fe:	6031      	str	r1, [r6, #0]
 8009500:	0606      	lsls	r6, r0, #24
 8009502:	d501      	bpl.n	8009508 <_printf_i+0xbc>
 8009504:	681d      	ldr	r5, [r3, #0]
 8009506:	e003      	b.n	8009510 <_printf_i+0xc4>
 8009508:	0645      	lsls	r5, r0, #25
 800950a:	d5fb      	bpl.n	8009504 <_printf_i+0xb8>
 800950c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009510:	2d00      	cmp	r5, #0
 8009512:	da03      	bge.n	800951c <_printf_i+0xd0>
 8009514:	232d      	movs	r3, #45	@ 0x2d
 8009516:	426d      	negs	r5, r5
 8009518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800951c:	4859      	ldr	r0, [pc, #356]	@ (8009684 <_printf_i+0x238>)
 800951e:	230a      	movs	r3, #10
 8009520:	e011      	b.n	8009546 <_printf_i+0xfa>
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	6833      	ldr	r3, [r6, #0]
 8009526:	0608      	lsls	r0, r1, #24
 8009528:	f853 5b04 	ldr.w	r5, [r3], #4
 800952c:	d402      	bmi.n	8009534 <_printf_i+0xe8>
 800952e:	0649      	lsls	r1, r1, #25
 8009530:	bf48      	it	mi
 8009532:	b2ad      	uxthmi	r5, r5
 8009534:	2f6f      	cmp	r7, #111	@ 0x6f
 8009536:	4853      	ldr	r0, [pc, #332]	@ (8009684 <_printf_i+0x238>)
 8009538:	6033      	str	r3, [r6, #0]
 800953a:	bf14      	ite	ne
 800953c:	230a      	movne	r3, #10
 800953e:	2308      	moveq	r3, #8
 8009540:	2100      	movs	r1, #0
 8009542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009546:	6866      	ldr	r6, [r4, #4]
 8009548:	60a6      	str	r6, [r4, #8]
 800954a:	2e00      	cmp	r6, #0
 800954c:	bfa2      	ittt	ge
 800954e:	6821      	ldrge	r1, [r4, #0]
 8009550:	f021 0104 	bicge.w	r1, r1, #4
 8009554:	6021      	strge	r1, [r4, #0]
 8009556:	b90d      	cbnz	r5, 800955c <_printf_i+0x110>
 8009558:	2e00      	cmp	r6, #0
 800955a:	d04b      	beq.n	80095f4 <_printf_i+0x1a8>
 800955c:	4616      	mov	r6, r2
 800955e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009562:	fb03 5711 	mls	r7, r3, r1, r5
 8009566:	5dc7      	ldrb	r7, [r0, r7]
 8009568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800956c:	462f      	mov	r7, r5
 800956e:	42bb      	cmp	r3, r7
 8009570:	460d      	mov	r5, r1
 8009572:	d9f4      	bls.n	800955e <_printf_i+0x112>
 8009574:	2b08      	cmp	r3, #8
 8009576:	d10b      	bne.n	8009590 <_printf_i+0x144>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	07df      	lsls	r7, r3, #31
 800957c:	d508      	bpl.n	8009590 <_printf_i+0x144>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	6861      	ldr	r1, [r4, #4]
 8009582:	4299      	cmp	r1, r3
 8009584:	bfde      	ittt	le
 8009586:	2330      	movle	r3, #48	@ 0x30
 8009588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800958c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009590:	1b92      	subs	r2, r2, r6
 8009592:	6122      	str	r2, [r4, #16]
 8009594:	f8cd a000 	str.w	sl, [sp]
 8009598:	464b      	mov	r3, r9
 800959a:	aa03      	add	r2, sp, #12
 800959c:	4621      	mov	r1, r4
 800959e:	4640      	mov	r0, r8
 80095a0:	f7ff fee6 	bl	8009370 <_printf_common>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d14a      	bne.n	800963e <_printf_i+0x1f2>
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	b004      	add	sp, #16
 80095ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	f043 0320 	orr.w	r3, r3, #32
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	4833      	ldr	r0, [pc, #204]	@ (8009688 <_printf_i+0x23c>)
 80095bc:	2778      	movs	r7, #120	@ 0x78
 80095be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	6831      	ldr	r1, [r6, #0]
 80095c6:	061f      	lsls	r7, r3, #24
 80095c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80095cc:	d402      	bmi.n	80095d4 <_printf_i+0x188>
 80095ce:	065f      	lsls	r7, r3, #25
 80095d0:	bf48      	it	mi
 80095d2:	b2ad      	uxthmi	r5, r5
 80095d4:	6031      	str	r1, [r6, #0]
 80095d6:	07d9      	lsls	r1, r3, #31
 80095d8:	bf44      	itt	mi
 80095da:	f043 0320 	orrmi.w	r3, r3, #32
 80095de:	6023      	strmi	r3, [r4, #0]
 80095e0:	b11d      	cbz	r5, 80095ea <_printf_i+0x19e>
 80095e2:	2310      	movs	r3, #16
 80095e4:	e7ac      	b.n	8009540 <_printf_i+0xf4>
 80095e6:	4827      	ldr	r0, [pc, #156]	@ (8009684 <_printf_i+0x238>)
 80095e8:	e7e9      	b.n	80095be <_printf_i+0x172>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f023 0320 	bic.w	r3, r3, #32
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	e7f6      	b.n	80095e2 <_printf_i+0x196>
 80095f4:	4616      	mov	r6, r2
 80095f6:	e7bd      	b.n	8009574 <_printf_i+0x128>
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	6961      	ldr	r1, [r4, #20]
 80095fe:	1d18      	adds	r0, r3, #4
 8009600:	6030      	str	r0, [r6, #0]
 8009602:	062e      	lsls	r6, r5, #24
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	d501      	bpl.n	800960c <_printf_i+0x1c0>
 8009608:	6019      	str	r1, [r3, #0]
 800960a:	e002      	b.n	8009612 <_printf_i+0x1c6>
 800960c:	0668      	lsls	r0, r5, #25
 800960e:	d5fb      	bpl.n	8009608 <_printf_i+0x1bc>
 8009610:	8019      	strh	r1, [r3, #0]
 8009612:	2300      	movs	r3, #0
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	4616      	mov	r6, r2
 8009618:	e7bc      	b.n	8009594 <_printf_i+0x148>
 800961a:	6833      	ldr	r3, [r6, #0]
 800961c:	1d1a      	adds	r2, r3, #4
 800961e:	6032      	str	r2, [r6, #0]
 8009620:	681e      	ldr	r6, [r3, #0]
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	2100      	movs	r1, #0
 8009626:	4630      	mov	r0, r6
 8009628:	f7f6 fdda 	bl	80001e0 <memchr>
 800962c:	b108      	cbz	r0, 8009632 <_printf_i+0x1e6>
 800962e:	1b80      	subs	r0, r0, r6
 8009630:	6060      	str	r0, [r4, #4]
 8009632:	6863      	ldr	r3, [r4, #4]
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	2300      	movs	r3, #0
 8009638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800963c:	e7aa      	b.n	8009594 <_printf_i+0x148>
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	4632      	mov	r2, r6
 8009642:	4649      	mov	r1, r9
 8009644:	4640      	mov	r0, r8
 8009646:	47d0      	blx	sl
 8009648:	3001      	adds	r0, #1
 800964a:	d0ad      	beq.n	80095a8 <_printf_i+0x15c>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	079b      	lsls	r3, r3, #30
 8009650:	d413      	bmi.n	800967a <_printf_i+0x22e>
 8009652:	68e0      	ldr	r0, [r4, #12]
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	4298      	cmp	r0, r3
 8009658:	bfb8      	it	lt
 800965a:	4618      	movlt	r0, r3
 800965c:	e7a6      	b.n	80095ac <_printf_i+0x160>
 800965e:	2301      	movs	r3, #1
 8009660:	4632      	mov	r2, r6
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d09d      	beq.n	80095a8 <_printf_i+0x15c>
 800966c:	3501      	adds	r5, #1
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	9903      	ldr	r1, [sp, #12]
 8009672:	1a5b      	subs	r3, r3, r1
 8009674:	42ab      	cmp	r3, r5
 8009676:	dcf2      	bgt.n	800965e <_printf_i+0x212>
 8009678:	e7eb      	b.n	8009652 <_printf_i+0x206>
 800967a:	2500      	movs	r5, #0
 800967c:	f104 0619 	add.w	r6, r4, #25
 8009680:	e7f5      	b.n	800966e <_printf_i+0x222>
 8009682:	bf00      	nop
 8009684:	0801f249 	.word	0x0801f249
 8009688:	0801f25a 	.word	0x0801f25a

0800968c <__sflush_r>:
 800968c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	0716      	lsls	r6, r2, #28
 8009696:	4605      	mov	r5, r0
 8009698:	460c      	mov	r4, r1
 800969a:	d454      	bmi.n	8009746 <__sflush_r+0xba>
 800969c:	684b      	ldr	r3, [r1, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dc02      	bgt.n	80096a8 <__sflush_r+0x1c>
 80096a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd48      	ble.n	800973a <__sflush_r+0xae>
 80096a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	d045      	beq.n	800973a <__sflush_r+0xae>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096b4:	682f      	ldr	r7, [r5, #0]
 80096b6:	6a21      	ldr	r1, [r4, #32]
 80096b8:	602b      	str	r3, [r5, #0]
 80096ba:	d030      	beq.n	800971e <__sflush_r+0x92>
 80096bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	0759      	lsls	r1, r3, #29
 80096c2:	d505      	bpl.n	80096d0 <__sflush_r+0x44>
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	1ad2      	subs	r2, r2, r3
 80096c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096ca:	b10b      	cbz	r3, 80096d0 <__sflush_r+0x44>
 80096cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	2300      	movs	r3, #0
 80096d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096d4:	6a21      	ldr	r1, [r4, #32]
 80096d6:	4628      	mov	r0, r5
 80096d8:	47b0      	blx	r6
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	d106      	bne.n	80096ee <__sflush_r+0x62>
 80096e0:	6829      	ldr	r1, [r5, #0]
 80096e2:	291d      	cmp	r1, #29
 80096e4:	d82b      	bhi.n	800973e <__sflush_r+0xb2>
 80096e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009790 <__sflush_r+0x104>)
 80096e8:	410a      	asrs	r2, r1
 80096ea:	07d6      	lsls	r6, r2, #31
 80096ec:	d427      	bmi.n	800973e <__sflush_r+0xb2>
 80096ee:	2200      	movs	r2, #0
 80096f0:	6062      	str	r2, [r4, #4]
 80096f2:	04d9      	lsls	r1, r3, #19
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	6022      	str	r2, [r4, #0]
 80096f8:	d504      	bpl.n	8009704 <__sflush_r+0x78>
 80096fa:	1c42      	adds	r2, r0, #1
 80096fc:	d101      	bne.n	8009702 <__sflush_r+0x76>
 80096fe:	682b      	ldr	r3, [r5, #0]
 8009700:	b903      	cbnz	r3, 8009704 <__sflush_r+0x78>
 8009702:	6560      	str	r0, [r4, #84]	@ 0x54
 8009704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009706:	602f      	str	r7, [r5, #0]
 8009708:	b1b9      	cbz	r1, 800973a <__sflush_r+0xae>
 800970a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800970e:	4299      	cmp	r1, r3
 8009710:	d002      	beq.n	8009718 <__sflush_r+0x8c>
 8009712:	4628      	mov	r0, r5
 8009714:	f7ff fbf2 	bl	8008efc <_free_r>
 8009718:	2300      	movs	r3, #0
 800971a:	6363      	str	r3, [r4, #52]	@ 0x34
 800971c:	e00d      	b.n	800973a <__sflush_r+0xae>
 800971e:	2301      	movs	r3, #1
 8009720:	4628      	mov	r0, r5
 8009722:	47b0      	blx	r6
 8009724:	4602      	mov	r2, r0
 8009726:	1c50      	adds	r0, r2, #1
 8009728:	d1c9      	bne.n	80096be <__sflush_r+0x32>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0c6      	beq.n	80096be <__sflush_r+0x32>
 8009730:	2b1d      	cmp	r3, #29
 8009732:	d001      	beq.n	8009738 <__sflush_r+0xac>
 8009734:	2b16      	cmp	r3, #22
 8009736:	d11e      	bne.n	8009776 <__sflush_r+0xea>
 8009738:	602f      	str	r7, [r5, #0]
 800973a:	2000      	movs	r0, #0
 800973c:	e022      	b.n	8009784 <__sflush_r+0xf8>
 800973e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009742:	b21b      	sxth	r3, r3
 8009744:	e01b      	b.n	800977e <__sflush_r+0xf2>
 8009746:	690f      	ldr	r7, [r1, #16]
 8009748:	2f00      	cmp	r7, #0
 800974a:	d0f6      	beq.n	800973a <__sflush_r+0xae>
 800974c:	0793      	lsls	r3, r2, #30
 800974e:	680e      	ldr	r6, [r1, #0]
 8009750:	bf08      	it	eq
 8009752:	694b      	ldreq	r3, [r1, #20]
 8009754:	600f      	str	r7, [r1, #0]
 8009756:	bf18      	it	ne
 8009758:	2300      	movne	r3, #0
 800975a:	eba6 0807 	sub.w	r8, r6, r7
 800975e:	608b      	str	r3, [r1, #8]
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	dde9      	ble.n	800973a <__sflush_r+0xae>
 8009766:	6a21      	ldr	r1, [r4, #32]
 8009768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800976a:	4643      	mov	r3, r8
 800976c:	463a      	mov	r2, r7
 800976e:	4628      	mov	r0, r5
 8009770:	47b0      	blx	r6
 8009772:	2800      	cmp	r0, #0
 8009774:	dc08      	bgt.n	8009788 <__sflush_r+0xfc>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009788:	4407      	add	r7, r0
 800978a:	eba8 0800 	sub.w	r8, r8, r0
 800978e:	e7e7      	b.n	8009760 <__sflush_r+0xd4>
 8009790:	dfbffffe 	.word	0xdfbffffe

08009794 <_fflush_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	690b      	ldr	r3, [r1, #16]
 8009798:	4605      	mov	r5, r0
 800979a:	460c      	mov	r4, r1
 800979c:	b913      	cbnz	r3, 80097a4 <_fflush_r+0x10>
 800979e:	2500      	movs	r5, #0
 80097a0:	4628      	mov	r0, r5
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	b118      	cbz	r0, 80097ae <_fflush_r+0x1a>
 80097a6:	6a03      	ldr	r3, [r0, #32]
 80097a8:	b90b      	cbnz	r3, 80097ae <_fflush_r+0x1a>
 80097aa:	f7ff f99f 	bl	8008aec <__sinit>
 80097ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f3      	beq.n	800979e <_fflush_r+0xa>
 80097b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097b8:	07d0      	lsls	r0, r2, #31
 80097ba:	d404      	bmi.n	80097c6 <_fflush_r+0x32>
 80097bc:	0599      	lsls	r1, r3, #22
 80097be:	d402      	bmi.n	80097c6 <_fflush_r+0x32>
 80097c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097c2:	f7ff fb8a 	bl	8008eda <__retarget_lock_acquire_recursive>
 80097c6:	4628      	mov	r0, r5
 80097c8:	4621      	mov	r1, r4
 80097ca:	f7ff ff5f 	bl	800968c <__sflush_r>
 80097ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097d0:	07da      	lsls	r2, r3, #31
 80097d2:	4605      	mov	r5, r0
 80097d4:	d4e4      	bmi.n	80097a0 <_fflush_r+0xc>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	059b      	lsls	r3, r3, #22
 80097da:	d4e1      	bmi.n	80097a0 <_fflush_r+0xc>
 80097dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097de:	f7ff fb7d 	bl	8008edc <__retarget_lock_release_recursive>
 80097e2:	e7dd      	b.n	80097a0 <_fflush_r+0xc>

080097e4 <__swhatbuf_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	460c      	mov	r4, r1
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	b096      	sub	sp, #88	@ 0x58
 80097f0:	4615      	mov	r5, r2
 80097f2:	461e      	mov	r6, r3
 80097f4:	da0d      	bge.n	8009812 <__swhatbuf_r+0x2e>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097fc:	f04f 0100 	mov.w	r1, #0
 8009800:	bf14      	ite	ne
 8009802:	2340      	movne	r3, #64	@ 0x40
 8009804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009808:	2000      	movs	r0, #0
 800980a:	6031      	str	r1, [r6, #0]
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	b016      	add	sp, #88	@ 0x58
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	466a      	mov	r2, sp
 8009814:	f000 f848 	bl	80098a8 <_fstat_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	dbec      	blt.n	80097f6 <__swhatbuf_r+0x12>
 800981c:	9901      	ldr	r1, [sp, #4]
 800981e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009826:	4259      	negs	r1, r3
 8009828:	4159      	adcs	r1, r3
 800982a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800982e:	e7eb      	b.n	8009808 <__swhatbuf_r+0x24>

08009830 <__smakebuf_r>:
 8009830:	898b      	ldrh	r3, [r1, #12]
 8009832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009834:	079d      	lsls	r5, r3, #30
 8009836:	4606      	mov	r6, r0
 8009838:	460c      	mov	r4, r1
 800983a:	d507      	bpl.n	800984c <__smakebuf_r+0x1c>
 800983c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	2301      	movs	r3, #1
 8009846:	6163      	str	r3, [r4, #20]
 8009848:	b003      	add	sp, #12
 800984a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984c:	ab01      	add	r3, sp, #4
 800984e:	466a      	mov	r2, sp
 8009850:	f7ff ffc8 	bl	80097e4 <__swhatbuf_r>
 8009854:	9f00      	ldr	r7, [sp, #0]
 8009856:	4605      	mov	r5, r0
 8009858:	4639      	mov	r1, r7
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff fbba 	bl	8008fd4 <_malloc_r>
 8009860:	b948      	cbnz	r0, 8009876 <__smakebuf_r+0x46>
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	059a      	lsls	r2, r3, #22
 8009868:	d4ee      	bmi.n	8009848 <__smakebuf_r+0x18>
 800986a:	f023 0303 	bic.w	r3, r3, #3
 800986e:	f043 0302 	orr.w	r3, r3, #2
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	e7e2      	b.n	800983c <__smakebuf_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	6020      	str	r0, [r4, #0]
 800987a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009886:	b15b      	cbz	r3, 80098a0 <__smakebuf_r+0x70>
 8009888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f81d 	bl	80098cc <_isatty_r>
 8009892:	b128      	cbz	r0, 80098a0 <__smakebuf_r+0x70>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f023 0303 	bic.w	r3, r3, #3
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	431d      	orrs	r5, r3
 80098a4:	81a5      	strh	r5, [r4, #12]
 80098a6:	e7cf      	b.n	8009848 <__smakebuf_r+0x18>

080098a8 <_fstat_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	@ (80098c8 <_fstat_r+0x20>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	f7f7 f9a8 	bl	8000c0a <_fstat>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_fstat_r+0x1c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_fstat_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	200017b0 	.word	0x200017b0

080098cc <_isatty_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d06      	ldr	r5, [pc, #24]	@ (80098e8 <_isatty_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f7 f9a7 	bl	8000c2a <_isatty>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_isatty_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_isatty_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200017b0 	.word	0x200017b0

080098ec <_sbrk_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d06      	ldr	r5, [pc, #24]	@ (8009908 <_sbrk_r+0x1c>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7f7 f9b0 	bl	8000c5c <_sbrk>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_sbrk_r+0x1a>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_sbrk_r+0x1a>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	200017b0 	.word	0x200017b0

0800990c <_init>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	bf00      	nop
 8009910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009912:	bc08      	pop	{r3}
 8009914:	469e      	mov	lr, r3
 8009916:	4770      	bx	lr

08009918 <_fini>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	bf00      	nop
 800991c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991e:	bc08      	pop	{r3}
 8009920:	469e      	mov	lr, r3
 8009922:	4770      	bx	lr
